// Code generated by MockGen. DO NOT EDIT.
// Source: connectors/connectors.go

// Package mock_connectors is a generated GoMock package.
package mock_connectors

import (
	reflect "reflect"

	connectors "github.com/IBM/ibm-spectrum-scale-csi/driver/csiplugin/connectors"
	gomock "github.com/golang/mock/gomock"
)

// MockSpectrumScaleConnector is a mock of SpectrumScaleConnector interface.
type MockSpectrumScaleConnector struct {
	ctrl     *gomock.Controller
	recorder *MockSpectrumScaleConnectorMockRecorder
}

// MockSpectrumScaleConnectorMockRecorder is the mock recorder for MockSpectrumScaleConnector.
type MockSpectrumScaleConnectorMockRecorder struct {
	mock *MockSpectrumScaleConnector
}

// NewMockSpectrumScaleConnector creates a new mock instance.
func NewMockSpectrumScaleConnector(ctrl *gomock.Controller) *MockSpectrumScaleConnector {
	mock := &MockSpectrumScaleConnector{ctrl: ctrl}
	mock.recorder = &MockSpectrumScaleConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpectrumScaleConnector) EXPECT() *MockSpectrumScaleConnectorMockRecorder {
	return m.recorder
}

// CheckIfDefaultPolicyPartitionExists mocks base method.
func (m *MockSpectrumScaleConnector) CheckIfDefaultPolicyPartitionExists(partitionName, filesystemName string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIfDefaultPolicyPartitionExists", partitionName, filesystemName)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckIfDefaultPolicyPartitionExists indicates an expected call of CheckIfDefaultPolicyPartitionExists.
func (mr *MockSpectrumScaleConnectorMockRecorder) CheckIfDefaultPolicyPartitionExists(partitionName, filesystemName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIfDefaultPolicyPartitionExists", reflect.TypeOf((*MockSpectrumScaleConnector)(nil).CheckIfDefaultPolicyPartitionExists), partitionName, filesystemName)
}

// CheckIfFSQuotaEnabled mocks base method.
func (m *MockSpectrumScaleConnector) CheckIfFSQuotaEnabled(filesystem string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIfFSQuotaEnabled", filesystem)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckIfFSQuotaEnabled indicates an expected call of CheckIfFSQuotaEnabled.
func (mr *MockSpectrumScaleConnectorMockRecorder) CheckIfFSQuotaEnabled(filesystem interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIfFSQuotaEnabled", reflect.TypeOf((*MockSpectrumScaleConnector)(nil).CheckIfFSQuotaEnabled), filesystem)
}

// CheckIfFileDirPresent mocks base method.
func (m *MockSpectrumScaleConnector) CheckIfFileDirPresent(filesystemName, relPath string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIfFileDirPresent", filesystemName, relPath)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIfFileDirPresent indicates an expected call of CheckIfFileDirPresent.
func (mr *MockSpectrumScaleConnectorMockRecorder) CheckIfFileDirPresent(filesystemName, relPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIfFileDirPresent", reflect.TypeOf((*MockSpectrumScaleConnector)(nil).CheckIfFileDirPresent), filesystemName, relPath)
}

// CheckIfFilesetExist mocks base method.
func (m *MockSpectrumScaleConnector) CheckIfFilesetExist(filesystemName, filesetName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIfFilesetExist", filesystemName, filesetName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIfFilesetExist indicates an expected call of CheckIfFilesetExist.
func (mr *MockSpectrumScaleConnectorMockRecorder) CheckIfFilesetExist(filesystemName, filesetName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIfFilesetExist", reflect.TypeOf((*MockSpectrumScaleConnector)(nil).CheckIfFilesetExist), filesystemName, filesetName)
}

// CheckIfSnapshotExist mocks base method.
func (m *MockSpectrumScaleConnector) CheckIfSnapshotExist(filesystemName, filesetName, snapshotName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIfSnapshotExist", filesystemName, filesetName, snapshotName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIfSnapshotExist indicates an expected call of CheckIfSnapshotExist.
func (mr *MockSpectrumScaleConnectorMockRecorder) CheckIfSnapshotExist(filesystemName, filesetName, snapshotName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIfSnapshotExist", reflect.TypeOf((*MockSpectrumScaleConnector)(nil).CheckIfSnapshotExist), filesystemName, filesetName, snapshotName)
}

// CopyDirectoryPath mocks base method.
func (m *MockSpectrumScaleConnector) CopyDirectoryPath(filesystemName, srcPath, targetPath, nodeclass string) (int, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyDirectoryPath", filesystemName, srcPath, targetPath, nodeclass)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CopyDirectoryPath indicates an expected call of CopyDirectoryPath.
func (mr *MockSpectrumScaleConnectorMockRecorder) CopyDirectoryPath(filesystemName, srcPath, targetPath, nodeclass interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyDirectoryPath", reflect.TypeOf((*MockSpectrumScaleConnector)(nil).CopyDirectoryPath), filesystemName, srcPath, targetPath, nodeclass)
}

// CopyFilesetPath mocks base method.
func (m *MockSpectrumScaleConnector) CopyFilesetPath(filesystemName, filesetName, srcPath, targetPath, nodeclass string) (int, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyFilesetPath", filesystemName, filesetName, srcPath, targetPath, nodeclass)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CopyFilesetPath indicates an expected call of CopyFilesetPath.
func (mr *MockSpectrumScaleConnectorMockRecorder) CopyFilesetPath(filesystemName, filesetName, srcPath, targetPath, nodeclass interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyFilesetPath", reflect.TypeOf((*MockSpectrumScaleConnector)(nil).CopyFilesetPath), filesystemName, filesetName, srcPath, targetPath, nodeclass)
}

// CopyFsetSnapshotPath mocks base method.
func (m *MockSpectrumScaleConnector) CopyFsetSnapshotPath(filesystemName, filesetName, snapshotName, srcPath, targetPath, nodeclass string) (int, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyFsetSnapshotPath", filesystemName, filesetName, snapshotName, srcPath, targetPath, nodeclass)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CopyFsetSnapshotPath indicates an expected call of CopyFsetSnapshotPath.
func (mr *MockSpectrumScaleConnectorMockRecorder) CopyFsetSnapshotPath(filesystemName, filesetName, snapshotName, srcPath, targetPath, nodeclass interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyFsetSnapshotPath", reflect.TypeOf((*MockSpectrumScaleConnector)(nil).CopyFsetSnapshotPath), filesystemName, filesetName, snapshotName, srcPath, targetPath, nodeclass)
}

// CreateFileset mocks base method.
func (m *MockSpectrumScaleConnector) CreateFileset(filesystemName, filesetName string, opts map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFileset", filesystemName, filesetName, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFileset indicates an expected call of CreateFileset.
func (mr *MockSpectrumScaleConnectorMockRecorder) CreateFileset(filesystemName, filesetName, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFileset", reflect.TypeOf((*MockSpectrumScaleConnector)(nil).CreateFileset), filesystemName, filesetName, opts)
}

// CreateSnapshot mocks base method.
func (m *MockSpectrumScaleConnector) CreateSnapshot(filesystemName, filesetName, snapshotName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSnapshot", filesystemName, filesetName, snapshotName)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSnapshot indicates an expected call of CreateSnapshot.
func (mr *MockSpectrumScaleConnectorMockRecorder) CreateSnapshot(filesystemName, filesetName, snapshotName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnapshot", reflect.TypeOf((*MockSpectrumScaleConnector)(nil).CreateSnapshot), filesystemName, filesetName, snapshotName)
}

// CreateSymLink mocks base method.
func (m *MockSpectrumScaleConnector) CreateSymLink(SlnkfilesystemName, TargetFs, relativePath, LnkPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSymLink", SlnkfilesystemName, TargetFs, relativePath, LnkPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSymLink indicates an expected call of CreateSymLink.
func (mr *MockSpectrumScaleConnectorMockRecorder) CreateSymLink(SlnkfilesystemName, TargetFs, relativePath, LnkPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSymLink", reflect.TypeOf((*MockSpectrumScaleConnector)(nil).CreateSymLink), SlnkfilesystemName, TargetFs, relativePath, LnkPath)
}

// DeleteDirectory mocks base method.
func (m *MockSpectrumScaleConnector) DeleteDirectory(filesystemName, dirName string, safe bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDirectory", filesystemName, dirName, safe)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDirectory indicates an expected call of DeleteDirectory.
func (mr *MockSpectrumScaleConnectorMockRecorder) DeleteDirectory(filesystemName, dirName, safe interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDirectory", reflect.TypeOf((*MockSpectrumScaleConnector)(nil).DeleteDirectory), filesystemName, dirName, safe)
}

// DeleteFileset mocks base method.
func (m *MockSpectrumScaleConnector) DeleteFileset(filesystemName, filesetName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFileset", filesystemName, filesetName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFileset indicates an expected call of DeleteFileset.
func (mr *MockSpectrumScaleConnectorMockRecorder) DeleteFileset(filesystemName, filesetName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFileset", reflect.TypeOf((*MockSpectrumScaleConnector)(nil).DeleteFileset), filesystemName, filesetName)
}

// DeleteSnapshot mocks base method.
func (m *MockSpectrumScaleConnector) DeleteSnapshot(filesystemName, filesetName, snapshotName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSnapshot", filesystemName, filesetName, snapshotName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSnapshot indicates an expected call of DeleteSnapshot.
func (mr *MockSpectrumScaleConnectorMockRecorder) DeleteSnapshot(filesystemName, filesetName, snapshotName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSnapshot", reflect.TypeOf((*MockSpectrumScaleConnector)(nil).DeleteSnapshot), filesystemName, filesetName, snapshotName)
}

// DeleteSymLnk mocks base method.
func (m *MockSpectrumScaleConnector) DeleteSymLnk(filesystemName, LnkName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSymLnk", filesystemName, LnkName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSymLnk indicates an expected call of DeleteSymLnk.
func (mr *MockSpectrumScaleConnectorMockRecorder) DeleteSymLnk(filesystemName, LnkName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSymLnk", reflect.TypeOf((*MockSpectrumScaleConnector)(nil).DeleteSymLnk), filesystemName, LnkName)
}

// DoesTierExist mocks base method.
func (m *MockSpectrumScaleConnector) DoesTierExist(tierName, filesystemName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoesTierExist", tierName, filesystemName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoesTierExist indicates an expected call of DoesTierExist.
func (mr *MockSpectrumScaleConnectorMockRecorder) DoesTierExist(tierName, filesystemName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoesTierExist", reflect.TypeOf((*MockSpectrumScaleConnector)(nil).DoesTierExist), tierName, filesystemName)
}

// FilesetRefreshTask mocks base method.
func (m *MockSpectrumScaleConnector) FilesetRefreshTask() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilesetRefreshTask")
	ret0, _ := ret[0].(error)
	return ret0
}

// FilesetRefreshTask indicates an expected call of FilesetRefreshTask.
func (mr *MockSpectrumScaleConnectorMockRecorder) FilesetRefreshTask() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilesetRefreshTask", reflect.TypeOf((*MockSpectrumScaleConnector)(nil).FilesetRefreshTask))
}

// GetClusterId mocks base method.
func (m *MockSpectrumScaleConnector) GetClusterId() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterId")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterId indicates an expected call of GetClusterId.
func (mr *MockSpectrumScaleConnectorMockRecorder) GetClusterId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterId", reflect.TypeOf((*MockSpectrumScaleConnector)(nil).GetClusterId))
}

// GetClusterSummary mocks base method.
func (m *MockSpectrumScaleConnector) GetClusterSummary() (connectors.ClusterSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterSummary")
	ret0, _ := ret[0].(connectors.ClusterSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterSummary indicates an expected call of GetClusterSummary.
func (mr *MockSpectrumScaleConnectorMockRecorder) GetClusterSummary() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterSummary", reflect.TypeOf((*MockSpectrumScaleConnector)(nil).GetClusterSummary))
}

// GetFileSetNameFromId mocks base method.
func (m *MockSpectrumScaleConnector) GetFileSetNameFromId(filesystemName, Id string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileSetNameFromId", filesystemName, Id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileSetNameFromId indicates an expected call of GetFileSetNameFromId.
func (mr *MockSpectrumScaleConnectorMockRecorder) GetFileSetNameFromId(filesystemName, Id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileSetNameFromId", reflect.TypeOf((*MockSpectrumScaleConnector)(nil).GetFileSetNameFromId), filesystemName, Id)
}

// GetFileSetResponseFromId mocks base method.
func (m *MockSpectrumScaleConnector) GetFileSetResponseFromId(filesystemName, Id string) (connectors.Fileset_v2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileSetResponseFromId", filesystemName, Id)
	ret0, _ := ret[0].(connectors.Fileset_v2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileSetResponseFromId indicates an expected call of GetFileSetResponseFromId.
func (mr *MockSpectrumScaleConnectorMockRecorder) GetFileSetResponseFromId(filesystemName, Id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileSetResponseFromId", reflect.TypeOf((*MockSpectrumScaleConnector)(nil).GetFileSetResponseFromId), filesystemName, Id)
}

// GetFileSetResponseFromName mocks base method.
func (m *MockSpectrumScaleConnector) GetFileSetResponseFromName(filesystemName, filesetName string) (connectors.Fileset_v2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileSetResponseFromName", filesystemName, filesetName)
	ret0, _ := ret[0].(connectors.Fileset_v2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileSetResponseFromName indicates an expected call of GetFileSetResponseFromName.
func (mr *MockSpectrumScaleConnectorMockRecorder) GetFileSetResponseFromName(filesystemName, filesetName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileSetResponseFromName", reflect.TypeOf((*MockSpectrumScaleConnector)(nil).GetFileSetResponseFromName), filesystemName, filesetName)
}

// GetFileSetUid mocks base method.
func (m *MockSpectrumScaleConnector) GetFileSetUid(filesystemName, filesetName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileSetUid", filesystemName, filesetName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileSetUid indicates an expected call of GetFileSetUid.
func (mr *MockSpectrumScaleConnectorMockRecorder) GetFileSetUid(filesystemName, filesetName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileSetUid", reflect.TypeOf((*MockSpectrumScaleConnector)(nil).GetFileSetUid), filesystemName, filesetName)
}

// GetFilesetQuotaDetails mocks base method.
func (m *MockSpectrumScaleConnector) GetFilesetQuotaDetails(filesystemName, filesetName string) (connectors.Quota_v2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesetQuotaDetails", filesystemName, filesetName)
	ret0, _ := ret[0].(connectors.Quota_v2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilesetQuotaDetails indicates an expected call of GetFilesetQuotaDetails.
func (mr *MockSpectrumScaleConnectorMockRecorder) GetFilesetQuotaDetails(filesystemName, filesetName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesetQuotaDetails", reflect.TypeOf((*MockSpectrumScaleConnector)(nil).GetFilesetQuotaDetails), filesystemName, filesetName)
}

// GetFilesetsInodeSpace mocks base method.
func (m *MockSpectrumScaleConnector) GetFilesetsInodeSpace(filesystemName string, inodeSpace int) ([]connectors.Fileset_v2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesetsInodeSpace", filesystemName, inodeSpace)
	ret0, _ := ret[0].([]connectors.Fileset_v2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilesetsInodeSpace indicates an expected call of GetFilesetsInodeSpace.
func (mr *MockSpectrumScaleConnectorMockRecorder) GetFilesetsInodeSpace(filesystemName, inodeSpace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesetsInodeSpace", reflect.TypeOf((*MockSpectrumScaleConnector)(nil).GetFilesetsInodeSpace), filesystemName, inodeSpace)
}

// GetFilesystemDetails mocks base method.
func (m *MockSpectrumScaleConnector) GetFilesystemDetails(filesystemName string) (connectors.FileSystem_v2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesystemDetails", filesystemName)
	ret0, _ := ret[0].(connectors.FileSystem_v2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilesystemDetails indicates an expected call of GetFilesystemDetails.
func (mr *MockSpectrumScaleConnectorMockRecorder) GetFilesystemDetails(filesystemName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesystemDetails", reflect.TypeOf((*MockSpectrumScaleConnector)(nil).GetFilesystemDetails), filesystemName)
}

// GetFilesystemMountDetails mocks base method.
func (m *MockSpectrumScaleConnector) GetFilesystemMountDetails(filesystemName string) (connectors.MountInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesystemMountDetails", filesystemName)
	ret0, _ := ret[0].(connectors.MountInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilesystemMountDetails indicates an expected call of GetFilesystemMountDetails.
func (mr *MockSpectrumScaleConnectorMockRecorder) GetFilesystemMountDetails(filesystemName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesystemMountDetails", reflect.TypeOf((*MockSpectrumScaleConnector)(nil).GetFilesystemMountDetails), filesystemName)
}

// GetFilesystemMountpoint mocks base method.
func (m *MockSpectrumScaleConnector) GetFilesystemMountpoint(filesystemName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesystemMountpoint", filesystemName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilesystemMountpoint indicates an expected call of GetFilesystemMountpoint.
func (mr *MockSpectrumScaleConnectorMockRecorder) GetFilesystemMountpoint(filesystemName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesystemMountpoint", reflect.TypeOf((*MockSpectrumScaleConnector)(nil).GetFilesystemMountpoint), filesystemName)
}

// GetFilesystemName mocks base method.
func (m *MockSpectrumScaleConnector) GetFilesystemName(filesystemUUID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesystemName", filesystemUUID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilesystemName indicates an expected call of GetFilesystemName.
func (mr *MockSpectrumScaleConnectorMockRecorder) GetFilesystemName(filesystemUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesystemName", reflect.TypeOf((*MockSpectrumScaleConnector)(nil).GetFilesystemName), filesystemUUID)
}

// GetFirstDataTier mocks base method.
func (m *MockSpectrumScaleConnector) GetFirstDataTier(filesystemName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirstDataTier", filesystemName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirstDataTier indicates an expected call of GetFirstDataTier.
func (mr *MockSpectrumScaleConnectorMockRecorder) GetFirstDataTier(filesystemName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirstDataTier", reflect.TypeOf((*MockSpectrumScaleConnector)(nil).GetFirstDataTier), filesystemName)
}

// GetFsUid mocks base method.
func (m *MockSpectrumScaleConnector) GetFsUid(filesystemName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFsUid", filesystemName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFsUid indicates an expected call of GetFsUid.
func (mr *MockSpectrumScaleConnectorMockRecorder) GetFsUid(filesystemName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFsUid", reflect.TypeOf((*MockSpectrumScaleConnector)(nil).GetFsUid), filesystemName)
}

// GetLatestFilesetSnapshots mocks base method.
func (m *MockSpectrumScaleConnector) GetLatestFilesetSnapshots(filesystemName, filesetName string) ([]connectors.Snapshot_v2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestFilesetSnapshots", filesystemName, filesetName)
	ret0, _ := ret[0].([]connectors.Snapshot_v2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestFilesetSnapshots indicates an expected call of GetLatestFilesetSnapshots.
func (mr *MockSpectrumScaleConnectorMockRecorder) GetLatestFilesetSnapshots(filesystemName, filesetName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestFilesetSnapshots", reflect.TypeOf((*MockSpectrumScaleConnector)(nil).GetLatestFilesetSnapshots), filesystemName, filesetName)
}

// GetScaleVersion mocks base method.
func (m *MockSpectrumScaleConnector) GetScaleVersion() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScaleVersion")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScaleVersion indicates an expected call of GetScaleVersion.
func (mr *MockSpectrumScaleConnectorMockRecorder) GetScaleVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScaleVersion", reflect.TypeOf((*MockSpectrumScaleConnector)(nil).GetScaleVersion))
}

// GetSnapshotCreateTimestamp mocks base method.
func (m *MockSpectrumScaleConnector) GetSnapshotCreateTimestamp(filesystemName, filesetName, snapName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshotCreateTimestamp", filesystemName, filesetName, snapName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshotCreateTimestamp indicates an expected call of GetSnapshotCreateTimestamp.
func (mr *MockSpectrumScaleConnectorMockRecorder) GetSnapshotCreateTimestamp(filesystemName, filesetName, snapName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshotCreateTimestamp", reflect.TypeOf((*MockSpectrumScaleConnector)(nil).GetSnapshotCreateTimestamp), filesystemName, filesetName, snapName)
}

// GetSnapshotUid mocks base method.
func (m *MockSpectrumScaleConnector) GetSnapshotUid(filesystemName, filesetName, snapName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshotUid", filesystemName, filesetName, snapName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshotUid indicates an expected call of GetSnapshotUid.
func (mr *MockSpectrumScaleConnectorMockRecorder) GetSnapshotUid(filesystemName, filesetName, snapName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshotUid", reflect.TypeOf((*MockSpectrumScaleConnector)(nil).GetSnapshotUid), filesystemName, filesetName, snapName)
}

// GetTierInfoFromName mocks base method.
func (m *MockSpectrumScaleConnector) GetTierInfoFromName(tierName, filesystemName string) (*connectors.StorageTier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTierInfoFromName", tierName, filesystemName)
	ret0, _ := ret[0].(*connectors.StorageTier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTierInfoFromName indicates an expected call of GetTierInfoFromName.
func (mr *MockSpectrumScaleConnectorMockRecorder) GetTierInfoFromName(tierName, filesystemName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTierInfoFromName", reflect.TypeOf((*MockSpectrumScaleConnector)(nil).GetTierInfoFromName), tierName, filesystemName)
}

// GetTimeZoneOffset mocks base method.
func (m *MockSpectrumScaleConnector) GetTimeZoneOffset() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeZoneOffset")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeZoneOffset indicates an expected call of GetTimeZoneOffset.
func (mr *MockSpectrumScaleConnectorMockRecorder) GetTimeZoneOffset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeZoneOffset", reflect.TypeOf((*MockSpectrumScaleConnector)(nil).GetTimeZoneOffset))
}

// IsFilesetLinked mocks base method.
func (m *MockSpectrumScaleConnector) IsFilesetLinked(filesystemName, filesetName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFilesetLinked", filesystemName, filesetName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsFilesetLinked indicates an expected call of IsFilesetLinked.
func (mr *MockSpectrumScaleConnectorMockRecorder) IsFilesetLinked(filesystemName, filesetName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFilesetLinked", reflect.TypeOf((*MockSpectrumScaleConnector)(nil).IsFilesetLinked), filesystemName, filesetName)
}

// IsFilesystemMountedOnGUINode mocks base method.
func (m *MockSpectrumScaleConnector) IsFilesystemMountedOnGUINode(filesystemName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFilesystemMountedOnGUINode", filesystemName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsFilesystemMountedOnGUINode indicates an expected call of IsFilesystemMountedOnGUINode.
func (mr *MockSpectrumScaleConnectorMockRecorder) IsFilesystemMountedOnGUINode(filesystemName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFilesystemMountedOnGUINode", reflect.TypeOf((*MockSpectrumScaleConnector)(nil).IsFilesystemMountedOnGUINode), filesystemName)
}

// IsNodeComponentHealthy mocks base method.
func (m *MockSpectrumScaleConnector) IsNodeComponentHealthy(nodeName, component string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNodeComponentHealthy", nodeName, component)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsNodeComponentHealthy indicates an expected call of IsNodeComponentHealthy.
func (mr *MockSpectrumScaleConnectorMockRecorder) IsNodeComponentHealthy(nodeName, component interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNodeComponentHealthy", reflect.TypeOf((*MockSpectrumScaleConnector)(nil).IsNodeComponentHealthy), nodeName, component)
}

// IsSnapshotSupported mocks base method.
func (m *MockSpectrumScaleConnector) IsSnapshotSupported() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSnapshotSupported")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsSnapshotSupported indicates an expected call of IsSnapshotSupported.
func (mr *MockSpectrumScaleConnectorMockRecorder) IsSnapshotSupported() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSnapshotSupported", reflect.TypeOf((*MockSpectrumScaleConnector)(nil).IsSnapshotSupported))
}

// IsValidNodeclass mocks base method.
func (m *MockSpectrumScaleConnector) IsValidNodeclass(nodeclass string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValidNodeclass", nodeclass)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsValidNodeclass indicates an expected call of IsValidNodeclass.
func (mr *MockSpectrumScaleConnectorMockRecorder) IsValidNodeclass(nodeclass interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValidNodeclass", reflect.TypeOf((*MockSpectrumScaleConnector)(nil).IsValidNodeclass), nodeclass)
}

// LinkFileset mocks base method.
func (m *MockSpectrumScaleConnector) LinkFileset(filesystemName, filesetName, linkpath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkFileset", filesystemName, filesetName, linkpath)
	ret0, _ := ret[0].(error)
	return ret0
}

// LinkFileset indicates an expected call of LinkFileset.
func (mr *MockSpectrumScaleConnectorMockRecorder) LinkFileset(filesystemName, filesetName, linkpath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkFileset", reflect.TypeOf((*MockSpectrumScaleConnector)(nil).LinkFileset), filesystemName, filesetName, linkpath)
}

// ListFileset mocks base method.
func (m *MockSpectrumScaleConnector) ListFileset(filesystemName, filesetName string) (connectors.Fileset_v2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFileset", filesystemName, filesetName)
	ret0, _ := ret[0].(connectors.Fileset_v2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFileset indicates an expected call of ListFileset.
func (mr *MockSpectrumScaleConnectorMockRecorder) ListFileset(filesystemName, filesetName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFileset", reflect.TypeOf((*MockSpectrumScaleConnector)(nil).ListFileset), filesystemName, filesetName)
}

// ListFilesetQuota mocks base method.
func (m *MockSpectrumScaleConnector) ListFilesetQuota(filesystemName, filesetName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFilesetQuota", filesystemName, filesetName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFilesetQuota indicates an expected call of ListFilesetQuota.
func (mr *MockSpectrumScaleConnectorMockRecorder) ListFilesetQuota(filesystemName, filesetName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFilesetQuota", reflect.TypeOf((*MockSpectrumScaleConnector)(nil).ListFilesetQuota), filesystemName, filesetName)
}

// ListFilesetSnapshots mocks base method.
func (m *MockSpectrumScaleConnector) ListFilesetSnapshots(filesystemName, filesetName string) ([]connectors.Snapshot_v2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFilesetSnapshots", filesystemName, filesetName)
	ret0, _ := ret[0].([]connectors.Snapshot_v2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFilesetSnapshots indicates an expected call of ListFilesetSnapshots.
func (mr *MockSpectrumScaleConnectorMockRecorder) ListFilesetSnapshots(filesystemName, filesetName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFilesetSnapshots", reflect.TypeOf((*MockSpectrumScaleConnector)(nil).ListFilesetSnapshots), filesystemName, filesetName)
}

// ListFilesystems mocks base method.
func (m *MockSpectrumScaleConnector) ListFilesystems() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFilesystems")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFilesystems indicates an expected call of ListFilesystems.
func (mr *MockSpectrumScaleConnectorMockRecorder) ListFilesystems() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFilesystems", reflect.TypeOf((*MockSpectrumScaleConnector)(nil).ListFilesystems))
}

// MakeDirectory mocks base method.
func (m *MockSpectrumScaleConnector) MakeDirectory(filesystemName, relativePath, uid, gid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeDirectory", filesystemName, relativePath, uid, gid)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakeDirectory indicates an expected call of MakeDirectory.
func (mr *MockSpectrumScaleConnectorMockRecorder) MakeDirectory(filesystemName, relativePath, uid, gid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeDirectory", reflect.TypeOf((*MockSpectrumScaleConnector)(nil).MakeDirectory), filesystemName, relativePath, uid, gid)
}

// MakeDirectoryV2 mocks base method.
func (m *MockSpectrumScaleConnector) MakeDirectoryV2(filesystemName, relativePath, uid, gid, permissions string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeDirectoryV2", filesystemName, relativePath, uid, gid, permissions)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakeDirectoryV2 indicates an expected call of MakeDirectoryV2.
func (mr *MockSpectrumScaleConnectorMockRecorder) MakeDirectoryV2(filesystemName, relativePath, uid, gid, permissions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeDirectoryV2", reflect.TypeOf((*MockSpectrumScaleConnector)(nil).MakeDirectoryV2), filesystemName, relativePath, uid, gid, permissions)
}

// MountFilesystem mocks base method.
func (m *MockSpectrumScaleConnector) MountFilesystem(filesystemName, nodeName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MountFilesystem", filesystemName, nodeName)
	ret0, _ := ret[0].(error)
	return ret0
}

// MountFilesystem indicates an expected call of MountFilesystem.
func (mr *MockSpectrumScaleConnectorMockRecorder) MountFilesystem(filesystemName, nodeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MountFilesystem", reflect.TypeOf((*MockSpectrumScaleConnector)(nil).MountFilesystem), filesystemName, nodeName)
}

// SetFilesetQuota mocks base method.
func (m *MockSpectrumScaleConnector) SetFilesetQuota(filesystemName, filesetName, quota string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFilesetQuota", filesystemName, filesetName, quota)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFilesetQuota indicates an expected call of SetFilesetQuota.
func (mr *MockSpectrumScaleConnectorMockRecorder) SetFilesetQuota(filesystemName, filesetName, quota interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFilesetQuota", reflect.TypeOf((*MockSpectrumScaleConnector)(nil).SetFilesetQuota), filesystemName, filesetName, quota)
}

// SetFilesystemPolicy mocks base method.
func (m *MockSpectrumScaleConnector) SetFilesystemPolicy(policy *connectors.Policy, filesystemName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFilesystemPolicy", policy, filesystemName)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFilesystemPolicy indicates an expected call of SetFilesystemPolicy.
func (mr *MockSpectrumScaleConnectorMockRecorder) SetFilesystemPolicy(policy, filesystemName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFilesystemPolicy", reflect.TypeOf((*MockSpectrumScaleConnector)(nil).SetFilesystemPolicy), policy, filesystemName)
}

// StatDirectory mocks base method.
func (m *MockSpectrumScaleConnector) StatDirectory(filesystemName, dirName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatDirectory", filesystemName, dirName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StatDirectory indicates an expected call of StatDirectory.
func (mr *MockSpectrumScaleConnectorMockRecorder) StatDirectory(filesystemName, dirName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatDirectory", reflect.TypeOf((*MockSpectrumScaleConnector)(nil).StatDirectory), filesystemName, dirName)
}

// UnlinkFileset mocks base method.
func (m *MockSpectrumScaleConnector) UnlinkFileset(filesystemName, filesetName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlinkFileset", filesystemName, filesetName)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnlinkFileset indicates an expected call of UnlinkFileset.
func (mr *MockSpectrumScaleConnectorMockRecorder) UnlinkFileset(filesystemName, filesetName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlinkFileset", reflect.TypeOf((*MockSpectrumScaleConnector)(nil).UnlinkFileset), filesystemName, filesetName)
}

// UnmountFilesystem mocks base method.
func (m *MockSpectrumScaleConnector) UnmountFilesystem(filesystemName, nodeName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmountFilesystem", filesystemName, nodeName)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnmountFilesystem indicates an expected call of UnmountFilesystem.
func (mr *MockSpectrumScaleConnectorMockRecorder) UnmountFilesystem(filesystemName, nodeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmountFilesystem", reflect.TypeOf((*MockSpectrumScaleConnector)(nil).UnmountFilesystem), filesystemName, nodeName)
}

// UpdateFileset mocks base method.
func (m *MockSpectrumScaleConnector) UpdateFileset(filesystemName, filesetName string, opts map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFileset", filesystemName, filesetName, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFileset indicates an expected call of UpdateFileset.
func (mr *MockSpectrumScaleConnectorMockRecorder) UpdateFileset(filesystemName, filesetName, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFileset", reflect.TypeOf((*MockSpectrumScaleConnector)(nil).UpdateFileset), filesystemName, filesetName, opts)
}

// WaitForJobCompletion mocks base method.
func (m *MockSpectrumScaleConnector) WaitForJobCompletion(statusCode int, jobID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForJobCompletion", statusCode, jobID)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForJobCompletion indicates an expected call of WaitForJobCompletion.
func (mr *MockSpectrumScaleConnectorMockRecorder) WaitForJobCompletion(statusCode, jobID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForJobCompletion", reflect.TypeOf((*MockSpectrumScaleConnector)(nil).WaitForJobCompletion), statusCode, jobID)
}

// WaitForJobCompletionWithResp mocks base method.
func (m *MockSpectrumScaleConnector) WaitForJobCompletionWithResp(statusCode int, jobID uint64) (connectors.GenericResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForJobCompletionWithResp", statusCode, jobID)
	ret0, _ := ret[0].(connectors.GenericResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitForJobCompletionWithResp indicates an expected call of WaitForJobCompletionWithResp.
func (mr *MockSpectrumScaleConnectorMockRecorder) WaitForJobCompletionWithResp(statusCode, jobID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForJobCompletionWithResp", reflect.TypeOf((*MockSpectrumScaleConnector)(nil).WaitForJobCompletionWithResp), statusCode, jobID)
}
