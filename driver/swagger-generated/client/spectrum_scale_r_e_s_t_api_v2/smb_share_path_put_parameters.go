// Code generated by go-swagger; DO NOT EDIT.

package spectrum_scale_r_e_s_t_api_v2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"example.com/m/v2/models"
)

// NewSmbSharePathPutParams creates a new SmbSharePathPutParams object
// with the default values initialized.
func NewSmbSharePathPutParams() *SmbSharePathPutParams {
	var ()
	return &SmbSharePathPutParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSmbSharePathPutParamsWithTimeout creates a new SmbSharePathPutParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSmbSharePathPutParamsWithTimeout(timeout time.Duration) *SmbSharePathPutParams {
	var ()
	return &SmbSharePathPutParams{

		timeout: timeout,
	}
}

// NewSmbSharePathPutParamsWithContext creates a new SmbSharePathPutParams object
// with the default values initialized, and the ability to set a context for a request
func NewSmbSharePathPutParamsWithContext(ctx context.Context) *SmbSharePathPutParams {
	var ()
	return &SmbSharePathPutParams{

		Context: ctx,
	}
}

// NewSmbSharePathPutParamsWithHTTPClient creates a new SmbSharePathPutParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSmbSharePathPutParamsWithHTTPClient(client *http.Client) *SmbSharePathPutParams {
	var ()
	return &SmbSharePathPutParams{
		HTTPClient: client,
	}
}

/*SmbSharePathPutParams contains all the parameters to send to the API endpoint
for the smb share path put operation typically these are written to a http.Request
*/
type SmbSharePathPutParams struct {

	/*Body*/
	Body *models.SmbShareUpdate
	/*ShareName*/
	ShareName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the smb share path put params
func (o *SmbSharePathPutParams) WithTimeout(timeout time.Duration) *SmbSharePathPutParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the smb share path put params
func (o *SmbSharePathPutParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the smb share path put params
func (o *SmbSharePathPutParams) WithContext(ctx context.Context) *SmbSharePathPutParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the smb share path put params
func (o *SmbSharePathPutParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the smb share path put params
func (o *SmbSharePathPutParams) WithHTTPClient(client *http.Client) *SmbSharePathPutParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the smb share path put params
func (o *SmbSharePathPutParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the smb share path put params
func (o *SmbSharePathPutParams) WithBody(body *models.SmbShareUpdate) *SmbSharePathPutParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the smb share path put params
func (o *SmbSharePathPutParams) SetBody(body *models.SmbShareUpdate) {
	o.Body = body
}

// WithShareName adds the shareName to the smb share path put params
func (o *SmbSharePathPutParams) WithShareName(shareName string) *SmbSharePathPutParams {
	o.SetShareName(shareName)
	return o
}

// SetShareName adds the shareName to the smb share path put params
func (o *SmbSharePathPutParams) SetShareName(shareName string) {
	o.ShareName = shareName
}

// WriteToRequest writes these params to a swagger request
func (o *SmbSharePathPutParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param shareName
	if err := r.SetPathParam("shareName", o.ShareName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
