// Code generated by go-swagger; DO NOT EDIT.

package spectrum_scale_r_e_s_t_api_v2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"example.com/m/v2/models"
)

// CoffeeGetv2Reader is a Reader for the CoffeeGetv2 structure.
type CoffeeGetv2Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CoffeeGetv2Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCoffeeGetv2OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 418:
		result := NewCoffeeGetv2IMATeapot()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCoffeeGetv2OK creates a CoffeeGetv2OK with default headers values
func NewCoffeeGetv2OK() *CoffeeGetv2OK {
	return &CoffeeGetv2OK{}
}

/*CoffeeGetv2OK handles this case with default header values.

successful operation
*/
type CoffeeGetv2OK struct {
	Payload *models.Http200Ok
}

func (o *CoffeeGetv2OK) Error() string {
	return fmt.Sprintf("[GET /scalemgmt/v2/coffee][%d] coffeeGetv2OK  %+v", 200, o.Payload)
}

func (o *CoffeeGetv2OK) GetPayload() *models.Http200Ok {
	return o.Payload
}

func (o *CoffeeGetv2OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Http200Ok)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCoffeeGetv2IMATeapot creates a CoffeeGetv2IMATeapot with default headers values
func NewCoffeeGetv2IMATeapot() *CoffeeGetv2IMATeapot {
	return &CoffeeGetv2IMATeapot{}
}

/*CoffeeGetv2IMATeapot handles this case with default header values.

I am a teapot.
*/
type CoffeeGetv2IMATeapot struct {
	Payload *models.Http400BadRequest
}

func (o *CoffeeGetv2IMATeapot) Error() string {
	return fmt.Sprintf("[GET /scalemgmt/v2/coffee][%d] coffeeGetv2IMATeapot  %+v", 418, o.Payload)
}

func (o *CoffeeGetv2IMATeapot) GetPayload() *models.Http400BadRequest {
	return o.Payload
}

func (o *CoffeeGetv2IMATeapot) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Http400BadRequest)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
