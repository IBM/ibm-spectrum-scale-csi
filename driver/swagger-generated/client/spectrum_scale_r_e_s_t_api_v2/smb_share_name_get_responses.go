// Code generated by go-swagger; DO NOT EDIT.

package spectrum_scale_r_e_s_t_api_v2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"example.com/m/v2/models"
)

// SmbShareNameGetReader is a Reader for the SmbShareNameGet structure.
type SmbShareNameGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SmbShareNameGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSmbShareNameGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSmbShareNameGetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSmbShareNameGetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSmbShareNameGetOK creates a SmbShareNameGetOK with default headers values
func NewSmbShareNameGetOK() *SmbShareNameGetOK {
	return &SmbShareNameGetOK{}
}

/*SmbShareNameGetOK handles this case with default header values.

successful operation
*/
type SmbShareNameGetOK struct {
	Payload *models.SmbShareInlineResponse200
}

func (o *SmbShareNameGetOK) Error() string {
	return fmt.Sprintf("[GET /scalemgmt/v2/smb/shares/{shareName}][%d] smbShareNameGetOK  %+v", 200, o.Payload)
}

func (o *SmbShareNameGetOK) GetPayload() *models.SmbShareInlineResponse200 {
	return o.Payload
}

func (o *SmbShareNameGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SmbShareInlineResponse200)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSmbShareNameGetBadRequest creates a SmbShareNameGetBadRequest with default headers values
func NewSmbShareNameGetBadRequest() *SmbShareNameGetBadRequest {
	return &SmbShareNameGetBadRequest{}
}

/*SmbShareNameGetBadRequest handles this case with default header values.

Invalid share name
*/
type SmbShareNameGetBadRequest struct {
	Payload *models.Http400BadRequest
}

func (o *SmbShareNameGetBadRequest) Error() string {
	return fmt.Sprintf("[GET /scalemgmt/v2/smb/shares/{shareName}][%d] smbShareNameGetBadRequest  %+v", 400, o.Payload)
}

func (o *SmbShareNameGetBadRequest) GetPayload() *models.Http400BadRequest {
	return o.Payload
}

func (o *SmbShareNameGetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Http400BadRequest)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSmbShareNameGetInternalServerError creates a SmbShareNameGetInternalServerError with default headers values
func NewSmbShareNameGetInternalServerError() *SmbShareNameGetInternalServerError {
	return &SmbShareNameGetInternalServerError{}
}

/*SmbShareNameGetInternalServerError handles this case with default header values.

Internal Server Error
*/
type SmbShareNameGetInternalServerError struct {
	Payload *models.Http500InternalServerError
}

func (o *SmbShareNameGetInternalServerError) Error() string {
	return fmt.Sprintf("[GET /scalemgmt/v2/smb/shares/{shareName}][%d] smbShareNameGetInternalServerError  %+v", 500, o.Payload)
}

func (o *SmbShareNameGetInternalServerError) GetPayload() *models.Http500InternalServerError {
	return o.Payload
}

func (o *SmbShareNameGetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Http500InternalServerError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
