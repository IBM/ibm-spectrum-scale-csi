// Code generated by go-swagger; DO NOT EDIT.

package spectrum_scale_r_e_s_t_api_v2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewFilesetsFilesetNameDeletev2Params creates a new FilesetsFilesetNameDeletev2Params object
// with the default values initialized.
func NewFilesetsFilesetNameDeletev2Params() *FilesetsFilesetNameDeletev2Params {
	var ()
	return &FilesetsFilesetNameDeletev2Params{

		timeout: cr.DefaultTimeout,
	}
}

// NewFilesetsFilesetNameDeletev2ParamsWithTimeout creates a new FilesetsFilesetNameDeletev2Params object
// with the default values initialized, and the ability to set a timeout on a request
func NewFilesetsFilesetNameDeletev2ParamsWithTimeout(timeout time.Duration) *FilesetsFilesetNameDeletev2Params {
	var ()
	return &FilesetsFilesetNameDeletev2Params{

		timeout: timeout,
	}
}

// NewFilesetsFilesetNameDeletev2ParamsWithContext creates a new FilesetsFilesetNameDeletev2Params object
// with the default values initialized, and the ability to set a context for a request
func NewFilesetsFilesetNameDeletev2ParamsWithContext(ctx context.Context) *FilesetsFilesetNameDeletev2Params {
	var ()
	return &FilesetsFilesetNameDeletev2Params{

		Context: ctx,
	}
}

// NewFilesetsFilesetNameDeletev2ParamsWithHTTPClient creates a new FilesetsFilesetNameDeletev2Params object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewFilesetsFilesetNameDeletev2ParamsWithHTTPClient(client *http.Client) *FilesetsFilesetNameDeletev2Params {
	var ()
	return &FilesetsFilesetNameDeletev2Params{
		HTTPClient: client,
	}
}

/*FilesetsFilesetNameDeletev2Params contains all the parameters to send to the API endpoint
for the filesets fileset name deletev2 operation typically these are written to a http.Request
*/
type FilesetsFilesetNameDeletev2Params struct {

	/*FilesetName
	  The fileset name

	*/
	FilesetName string
	/*FilesystemName
	  The filesystem name, :all:, :all\_local: or :all\_remote:

	*/
	FilesystemName string
	/*QosClass
	  The QOS class the operation will be performed in

	*/
	QosClass *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the filesets fileset name deletev2 params
func (o *FilesetsFilesetNameDeletev2Params) WithTimeout(timeout time.Duration) *FilesetsFilesetNameDeletev2Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the filesets fileset name deletev2 params
func (o *FilesetsFilesetNameDeletev2Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the filesets fileset name deletev2 params
func (o *FilesetsFilesetNameDeletev2Params) WithContext(ctx context.Context) *FilesetsFilesetNameDeletev2Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the filesets fileset name deletev2 params
func (o *FilesetsFilesetNameDeletev2Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the filesets fileset name deletev2 params
func (o *FilesetsFilesetNameDeletev2Params) WithHTTPClient(client *http.Client) *FilesetsFilesetNameDeletev2Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the filesets fileset name deletev2 params
func (o *FilesetsFilesetNameDeletev2Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilesetName adds the filesetName to the filesets fileset name deletev2 params
func (o *FilesetsFilesetNameDeletev2Params) WithFilesetName(filesetName string) *FilesetsFilesetNameDeletev2Params {
	o.SetFilesetName(filesetName)
	return o
}

// SetFilesetName adds the filesetName to the filesets fileset name deletev2 params
func (o *FilesetsFilesetNameDeletev2Params) SetFilesetName(filesetName string) {
	o.FilesetName = filesetName
}

// WithFilesystemName adds the filesystemName to the filesets fileset name deletev2 params
func (o *FilesetsFilesetNameDeletev2Params) WithFilesystemName(filesystemName string) *FilesetsFilesetNameDeletev2Params {
	o.SetFilesystemName(filesystemName)
	return o
}

// SetFilesystemName adds the filesystemName to the filesets fileset name deletev2 params
func (o *FilesetsFilesetNameDeletev2Params) SetFilesystemName(filesystemName string) {
	o.FilesystemName = filesystemName
}

// WithQosClass adds the qosClass to the filesets fileset name deletev2 params
func (o *FilesetsFilesetNameDeletev2Params) WithQosClass(qosClass *string) *FilesetsFilesetNameDeletev2Params {
	o.SetQosClass(qosClass)
	return o
}

// SetQosClass adds the qosClass to the filesets fileset name deletev2 params
func (o *FilesetsFilesetNameDeletev2Params) SetQosClass(qosClass *string) {
	o.QosClass = qosClass
}

// WriteToRequest writes these params to a swagger request
func (o *FilesetsFilesetNameDeletev2Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param filesetName
	if err := r.SetPathParam("filesetName", o.FilesetName); err != nil {
		return err
	}

	// path param filesystemName
	if err := r.SetPathParam("filesystemName", o.FilesystemName); err != nil {
		return err
	}

	if o.QosClass != nil {

		// query param qosClass
		var qrQosClass string
		if o.QosClass != nil {
			qrQosClass = *o.QosClass
		}
		qQosClass := qrQosClass
		if qQosClass != "" {
			if err := r.SetQueryParam("qosClass", qQosClass); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
