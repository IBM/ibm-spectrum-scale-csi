// Code generated by go-swagger; DO NOT EDIT.

package spectrum_scale_r_e_s_t_api_v2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewNfsExportPathGetParams creates a new NfsExportPathGetParams object
// with the default values initialized.
func NewNfsExportPathGetParams() *NfsExportPathGetParams {
	var ()
	return &NfsExportPathGetParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewNfsExportPathGetParamsWithTimeout creates a new NfsExportPathGetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewNfsExportPathGetParamsWithTimeout(timeout time.Duration) *NfsExportPathGetParams {
	var ()
	return &NfsExportPathGetParams{

		timeout: timeout,
	}
}

// NewNfsExportPathGetParamsWithContext creates a new NfsExportPathGetParams object
// with the default values initialized, and the ability to set a context for a request
func NewNfsExportPathGetParamsWithContext(ctx context.Context) *NfsExportPathGetParams {
	var ()
	return &NfsExportPathGetParams{

		Context: ctx,
	}
}

// NewNfsExportPathGetParamsWithHTTPClient creates a new NfsExportPathGetParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewNfsExportPathGetParamsWithHTTPClient(client *http.Client) *NfsExportPathGetParams {
	var ()
	return &NfsExportPathGetParams{
		HTTPClient: client,
	}
}

/*NfsExportPathGetParams contains all the parameters to send to the API endpoint
for the nfs export path get operation typically these are written to a http.Request
*/
type NfsExportPathGetParams struct {

	/*ExportPath
	  path of the export

	*/
	ExportPath string
	/*Fields
	  Comma separated list of fields to be included in response. ':all:' selects all available fields.

	*/
	Fields *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the nfs export path get params
func (o *NfsExportPathGetParams) WithTimeout(timeout time.Duration) *NfsExportPathGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the nfs export path get params
func (o *NfsExportPathGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the nfs export path get params
func (o *NfsExportPathGetParams) WithContext(ctx context.Context) *NfsExportPathGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the nfs export path get params
func (o *NfsExportPathGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the nfs export path get params
func (o *NfsExportPathGetParams) WithHTTPClient(client *http.Client) *NfsExportPathGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the nfs export path get params
func (o *NfsExportPathGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithExportPath adds the exportPath to the nfs export path get params
func (o *NfsExportPathGetParams) WithExportPath(exportPath string) *NfsExportPathGetParams {
	o.SetExportPath(exportPath)
	return o
}

// SetExportPath adds the exportPath to the nfs export path get params
func (o *NfsExportPathGetParams) SetExportPath(exportPath string) {
	o.ExportPath = exportPath
}

// WithFields adds the fields to the nfs export path get params
func (o *NfsExportPathGetParams) WithFields(fields *string) *NfsExportPathGetParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the nfs export path get params
func (o *NfsExportPathGetParams) SetFields(fields *string) {
	o.Fields = fields
}

// WriteToRequest writes these params to a swagger request
func (o *NfsExportPathGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param exportPath
	if err := r.SetPathParam("exportPath", o.ExportPath); err != nil {
		return err
	}

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
