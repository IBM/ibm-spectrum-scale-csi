// Code generated by go-swagger; DO NOT EDIT.

package spectrum_scale_r_e_s_t_api_v2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewEnqueueRefreshTaskParams creates a new EnqueueRefreshTaskParams object
// with the default values initialized.
func NewEnqueueRefreshTaskParams() *EnqueueRefreshTaskParams {
	var ()
	return &EnqueueRefreshTaskParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewEnqueueRefreshTaskParamsWithTimeout creates a new EnqueueRefreshTaskParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewEnqueueRefreshTaskParamsWithTimeout(timeout time.Duration) *EnqueueRefreshTaskParams {
	var ()
	return &EnqueueRefreshTaskParams{

		timeout: timeout,
	}
}

// NewEnqueueRefreshTaskParamsWithContext creates a new EnqueueRefreshTaskParams object
// with the default values initialized, and the ability to set a context for a request
func NewEnqueueRefreshTaskParamsWithContext(ctx context.Context) *EnqueueRefreshTaskParams {
	var ()
	return &EnqueueRefreshTaskParams{

		Context: ctx,
	}
}

// NewEnqueueRefreshTaskParamsWithHTTPClient creates a new EnqueueRefreshTaskParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewEnqueueRefreshTaskParamsWithHTTPClient(client *http.Client) *EnqueueRefreshTaskParams {
	var ()
	return &EnqueueRefreshTaskParams{
		HTTPClient: client,
	}
}

/*EnqueueRefreshTaskParams contains all the parameters to send to the API endpoint
for the enqueue refresh task operation typically these are written to a http.Request
*/
type EnqueueRefreshTaskParams struct {

	/*MaxDelay
	  Maximum delay in seconds.

	*/
	MaxDelay int32
	/*TaskID
	  The ID of the task to be executed.

	*/
	TaskID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the enqueue refresh task params
func (o *EnqueueRefreshTaskParams) WithTimeout(timeout time.Duration) *EnqueueRefreshTaskParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the enqueue refresh task params
func (o *EnqueueRefreshTaskParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the enqueue refresh task params
func (o *EnqueueRefreshTaskParams) WithContext(ctx context.Context) *EnqueueRefreshTaskParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the enqueue refresh task params
func (o *EnqueueRefreshTaskParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the enqueue refresh task params
func (o *EnqueueRefreshTaskParams) WithHTTPClient(client *http.Client) *EnqueueRefreshTaskParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the enqueue refresh task params
func (o *EnqueueRefreshTaskParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithMaxDelay adds the maxDelay to the enqueue refresh task params
func (o *EnqueueRefreshTaskParams) WithMaxDelay(maxDelay int32) *EnqueueRefreshTaskParams {
	o.SetMaxDelay(maxDelay)
	return o
}

// SetMaxDelay adds the maxDelay to the enqueue refresh task params
func (o *EnqueueRefreshTaskParams) SetMaxDelay(maxDelay int32) {
	o.MaxDelay = maxDelay
}

// WithTaskID adds the taskID to the enqueue refresh task params
func (o *EnqueueRefreshTaskParams) WithTaskID(taskID string) *EnqueueRefreshTaskParams {
	o.SetTaskID(taskID)
	return o
}

// SetTaskID adds the taskId to the enqueue refresh task params
func (o *EnqueueRefreshTaskParams) SetTaskID(taskID string) {
	o.TaskID = taskID
}

// WriteToRequest writes these params to a swagger request
func (o *EnqueueRefreshTaskParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param maxDelay
	qrMaxDelay := o.MaxDelay
	qMaxDelay := swag.FormatInt32(qrMaxDelay)
	if qMaxDelay != "" {
		if err := r.SetQueryParam("maxDelay", qMaxDelay); err != nil {
			return err
		}
	}

	// query param taskId
	qrTaskID := o.TaskID
	qTaskID := qrTaskID
	if qTaskID != "" {
		if err := r.SetQueryParam("taskId", qTaskID); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
