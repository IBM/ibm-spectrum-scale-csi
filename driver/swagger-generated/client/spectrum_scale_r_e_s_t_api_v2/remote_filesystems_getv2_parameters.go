// Code generated by go-swagger; DO NOT EDIT.

package spectrum_scale_r_e_s_t_api_v2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewRemoteFilesystemsGetv2Params creates a new RemoteFilesystemsGetv2Params object
// with the default values initialized.
func NewRemoteFilesystemsGetv2Params() *RemoteFilesystemsGetv2Params {
	var ()
	return &RemoteFilesystemsGetv2Params{

		timeout: cr.DefaultTimeout,
	}
}

// NewRemoteFilesystemsGetv2ParamsWithTimeout creates a new RemoteFilesystemsGetv2Params object
// with the default values initialized, and the ability to set a timeout on a request
func NewRemoteFilesystemsGetv2ParamsWithTimeout(timeout time.Duration) *RemoteFilesystemsGetv2Params {
	var ()
	return &RemoteFilesystemsGetv2Params{

		timeout: timeout,
	}
}

// NewRemoteFilesystemsGetv2ParamsWithContext creates a new RemoteFilesystemsGetv2Params object
// with the default values initialized, and the ability to set a context for a request
func NewRemoteFilesystemsGetv2ParamsWithContext(ctx context.Context) *RemoteFilesystemsGetv2Params {
	var ()
	return &RemoteFilesystemsGetv2Params{

		Context: ctx,
	}
}

// NewRemoteFilesystemsGetv2ParamsWithHTTPClient creates a new RemoteFilesystemsGetv2Params object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewRemoteFilesystemsGetv2ParamsWithHTTPClient(client *http.Client) *RemoteFilesystemsGetv2Params {
	var ()
	return &RemoteFilesystemsGetv2Params{
		HTTPClient: client,
	}
}

/*RemoteFilesystemsGetv2Params contains all the parameters to send to the API endpoint
for the remote filesystems getv2 operation typically these are written to a http.Request
*/
type RemoteFilesystemsGetv2Params struct {

	/*OwningCluster
	  List remote filesystems for a specifc remote cluster.

	*/
	OwningCluster *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the remote filesystems getv2 params
func (o *RemoteFilesystemsGetv2Params) WithTimeout(timeout time.Duration) *RemoteFilesystemsGetv2Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the remote filesystems getv2 params
func (o *RemoteFilesystemsGetv2Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the remote filesystems getv2 params
func (o *RemoteFilesystemsGetv2Params) WithContext(ctx context.Context) *RemoteFilesystemsGetv2Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the remote filesystems getv2 params
func (o *RemoteFilesystemsGetv2Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the remote filesystems getv2 params
func (o *RemoteFilesystemsGetv2Params) WithHTTPClient(client *http.Client) *RemoteFilesystemsGetv2Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the remote filesystems getv2 params
func (o *RemoteFilesystemsGetv2Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithOwningCluster adds the owningCluster to the remote filesystems getv2 params
func (o *RemoteFilesystemsGetv2Params) WithOwningCluster(owningCluster *string) *RemoteFilesystemsGetv2Params {
	o.SetOwningCluster(owningCluster)
	return o
}

// SetOwningCluster adds the owningCluster to the remote filesystems getv2 params
func (o *RemoteFilesystemsGetv2Params) SetOwningCluster(owningCluster *string) {
	o.OwningCluster = owningCluster
}

// WriteToRequest writes these params to a swagger request
func (o *RemoteFilesystemsGetv2Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.OwningCluster != nil {

		// query param owningCluster
		var qrOwningCluster string
		if o.OwningCluster != nil {
			qrOwningCluster = *o.OwningCluster
		}
		qOwningCluster := qrOwningCluster
		if qOwningCluster != "" {
			if err := r.SetQueryParam("owningCluster", qOwningCluster); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
