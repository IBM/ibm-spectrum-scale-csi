// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// FilesystemQuota filesystem quota
//
// swagger:model FilesystemQuota
type FilesystemQuota struct {

	// Default quotas enabled
	DefaultQuotasEnabled string `json:"defaultQuotasEnabled,omitempty"`

	// Specifies that when quotas are enforced for a fileset, the numbers reported by the df command are based on the quotas for the fileset (rather than the entire file system). Either 'yes' or 'no'.
	FilesetdfEnabled bool `json:"filesetdfEnabled,omitempty"`

	// Is the scope of user and group quota limit checks on the individual fileset level (rather than the entire file system).
	PerfilesetQuotas bool `json:"perfilesetQuotas,omitempty"`

	// Quotas accounting enabled for any of 'user', 'group' and 'fileset'. Accounting means that usage is tracked against quotas. If action should be taken when quotas are exceeded quotas must be also enforced.
	QuotasAccountingEnabled string `json:"quotasAccountingEnabled,omitempty"`

	// Quotas enforced for any of 'user', 'group' and 'fileset'.
	QuotasEnforced string `json:"quotasEnforced,omitempty"`
}

// Validate validates this filesystem quota
func (m *FilesystemQuota) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FilesystemQuota) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FilesystemQuota) UnmarshalBinary(b []byte) error {
	var res FilesystemQuota
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
