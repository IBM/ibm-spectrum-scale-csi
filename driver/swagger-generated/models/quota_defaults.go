// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// QuotaDefaults Default settings for either file system (USR, GRP, FSET) or file-set (USR, GRP) related quotas
//
// swagger:model QuotaDefaults
type QuotaDefaults struct {

	// block hard limit
	BlockHardLimit int64 `json:"blockHardLimit,omitempty"`

	// block soft limit
	BlockSoftLimit int64 `json:"blockSoftLimit,omitempty"`

	// device name
	DeviceName string `json:"deviceName,omitempty"`

	// entry type
	// Enum: [DEFAULT_ON DEFAULT_OFF EXPLICIT DEFAULT_ED_FS DEFAULT_ED_FSET INITIAL N_A]
	EntryType string `json:"entryType,omitempty"`

	// files hard limit
	FilesHardLimit int64 `json:"filesHardLimit,omitempty"`

	// files soft limit
	FilesSoftLimit int64 `json:"filesSoftLimit,omitempty"`

	// fileset Id
	FilesetID int32 `json:"filesetId,omitempty"`

	// fileset name
	FilesetName string `json:"filesetName,omitempty"`

	// last update
	LastUpdate *FsccDate `json:"lastUpdate,omitempty"`

	// quota type
	// Enum: [USR GRP FILESET]
	QuotaType string `json:"quotaType,omitempty"`

	// unique ID
	UniqueID string `json:"uniqueID,omitempty"`
}

// Validate validates this quota defaults
func (m *QuotaDefaults) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEntryType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuotaType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var quotaDefaultsTypeEntryTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DEFAULT_ON","DEFAULT_OFF","EXPLICIT","DEFAULT_ED_FS","DEFAULT_ED_FSET","INITIAL","N_A"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		quotaDefaultsTypeEntryTypePropEnum = append(quotaDefaultsTypeEntryTypePropEnum, v)
	}
}

const (

	// QuotaDefaultsEntryTypeDEFAULTON captures enum value "DEFAULT_ON"
	QuotaDefaultsEntryTypeDEFAULTON string = "DEFAULT_ON"

	// QuotaDefaultsEntryTypeDEFAULTOFF captures enum value "DEFAULT_OFF"
	QuotaDefaultsEntryTypeDEFAULTOFF string = "DEFAULT_OFF"

	// QuotaDefaultsEntryTypeEXPLICIT captures enum value "EXPLICIT"
	QuotaDefaultsEntryTypeEXPLICIT string = "EXPLICIT"

	// QuotaDefaultsEntryTypeDEFAULTEDFS captures enum value "DEFAULT_ED_FS"
	QuotaDefaultsEntryTypeDEFAULTEDFS string = "DEFAULT_ED_FS"

	// QuotaDefaultsEntryTypeDEFAULTEDFSET captures enum value "DEFAULT_ED_FSET"
	QuotaDefaultsEntryTypeDEFAULTEDFSET string = "DEFAULT_ED_FSET"

	// QuotaDefaultsEntryTypeINITIAL captures enum value "INITIAL"
	QuotaDefaultsEntryTypeINITIAL string = "INITIAL"

	// QuotaDefaultsEntryTypeNA captures enum value "N_A"
	QuotaDefaultsEntryTypeNA string = "N_A"
)

// prop value enum
func (m *QuotaDefaults) validateEntryTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, quotaDefaultsTypeEntryTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *QuotaDefaults) validateEntryType(formats strfmt.Registry) error {

	if swag.IsZero(m.EntryType) { // not required
		return nil
	}

	// value enum
	if err := m.validateEntryTypeEnum("entryType", "body", m.EntryType); err != nil {
		return err
	}

	return nil
}

func (m *QuotaDefaults) validateLastUpdate(formats strfmt.Registry) error {

	if swag.IsZero(m.LastUpdate) { // not required
		return nil
	}

	if m.LastUpdate != nil {
		if err := m.LastUpdate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastUpdate")
			}
			return err
		}
	}

	return nil
}

var quotaDefaultsTypeQuotaTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["USR","GRP","FILESET"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		quotaDefaultsTypeQuotaTypePropEnum = append(quotaDefaultsTypeQuotaTypePropEnum, v)
	}
}

const (

	// QuotaDefaultsQuotaTypeUSR captures enum value "USR"
	QuotaDefaultsQuotaTypeUSR string = "USR"

	// QuotaDefaultsQuotaTypeGRP captures enum value "GRP"
	QuotaDefaultsQuotaTypeGRP string = "GRP"

	// QuotaDefaultsQuotaTypeFILESET captures enum value "FILESET"
	QuotaDefaultsQuotaTypeFILESET string = "FILESET"
)

// prop value enum
func (m *QuotaDefaults) validateQuotaTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, quotaDefaultsTypeQuotaTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *QuotaDefaults) validateQuotaType(formats strfmt.Registry) error {

	if swag.IsZero(m.QuotaType) { // not required
		return nil
	}

	// value enum
	if err := m.validateQuotaTypeEnum("quotaType", "body", m.QuotaType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *QuotaDefaults) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QuotaDefaults) UnmarshalBinary(b []byte) error {
	var res QuotaDefaults
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
