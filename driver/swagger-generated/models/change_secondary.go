// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ChangeSecondary change secondary
//
// swagger:model ChangeSecondary
type ChangeSecondary struct {

	// Used for inband trucking. Copies data to a new empty secondary. If you have already copied data to the secondary site, mtime of files at the primary and secondary site is checked. Here, granularity of mtime is in microseconds. If mtime values of both files match, data is not copied again and existing data on the secondary site is used. If mtime values of both files do not match, existing data on the secondary site is discarded and data from the primary site is written to the secondary site.
	Inband bool `json:"inband,omitempty"`

	// Specifies a new home server and path, replacing the home server and path originally set
	// Required: true
	NewTarget *string `json:"newTarget"`

	// Used when you want to change the IP address or NFS server name for the same target path. The new NFS server must be in the same home cluster and must be of the same architecture(power or x86) as the existing NFS server in the target path. This option can be used to move from NFS to a mapping target.
	TargetOnly bool `json:"targetOnly,omitempty"`
}

// Validate validates this change secondary
func (m *ChangeSecondary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNewTarget(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChangeSecondary) validateNewTarget(formats strfmt.Registry) error {

	if err := validate.Required("newTarget", "body", m.NewTarget); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ChangeSecondary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ChangeSecondary) UnmarshalBinary(b []byte) error {
	var res ChangeSecondary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
