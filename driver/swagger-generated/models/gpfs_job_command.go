// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GpfsJobCommand gpfs job command
//
// swagger:model GpfsJobCommand
type GpfsJobCommand struct {

	// command Id
	CommandID string `json:"commandId,omitempty"`

	// command spec
	CommandSpec *GpfsJobCommandSpec `json:"commandSpec,omitempty"`

	// command string
	CommandString string `json:"commandString,omitempty"`

	// creation time
	CreationTime *FsccDate `json:"creationTime,omitempty"`

	// end time
	EndTime *FsccDate `json:"endTime,omitempty"`

	// execution node
	ExecutionNode string `json:"executionNode,omitempty"`

	// job Id
	JobID string `json:"jobId,omitempty"`

	// last update
	LastUpdate *FsccDate `json:"lastUpdate,omitempty"`

	// oid
	Oid int64 `json:"oid,omitempty"`

	// pid
	Pid int32 `json:"pid,omitempty"`

	// progress
	Progress string `json:"progress,omitempty"`

	// return code
	ReturnCode int32 `json:"returnCode,omitempty"`

	// start time
	StartTime *FsccDate `json:"startTime,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// unique ID
	UniqueID string `json:"uniqueID,omitempty"`
}

// Validate validates this gpfs job command
func (m *GpfsJobCommand) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommandSpec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GpfsJobCommand) validateCommandSpec(formats strfmt.Registry) error {

	if swag.IsZero(m.CommandSpec) { // not required
		return nil
	}

	if m.CommandSpec != nil {
		if err := m.CommandSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("commandSpec")
			}
			return err
		}
	}

	return nil
}

func (m *GpfsJobCommand) validateCreationTime(formats strfmt.Registry) error {

	if swag.IsZero(m.CreationTime) { // not required
		return nil
	}

	if m.CreationTime != nil {
		if err := m.CreationTime.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("creationTime")
			}
			return err
		}
	}

	return nil
}

func (m *GpfsJobCommand) validateEndTime(formats strfmt.Registry) error {

	if swag.IsZero(m.EndTime) { // not required
		return nil
	}

	if m.EndTime != nil {
		if err := m.EndTime.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("endTime")
			}
			return err
		}
	}

	return nil
}

func (m *GpfsJobCommand) validateLastUpdate(formats strfmt.Registry) error {

	if swag.IsZero(m.LastUpdate) { // not required
		return nil
	}

	if m.LastUpdate != nil {
		if err := m.LastUpdate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastUpdate")
			}
			return err
		}
	}

	return nil
}

func (m *GpfsJobCommand) validateStartTime(formats strfmt.Registry) error {

	if swag.IsZero(m.StartTime) { // not required
		return nil
	}

	if m.StartTime != nil {
		if err := m.StartTime.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("startTime")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GpfsJobCommand) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GpfsJobCommand) UnmarshalBinary(b []byte) error {
	var res GpfsJobCommand
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
