// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Snapshot Summary information about a Snapshot
//
// swagger:model Snapshot
type Snapshot struct {

	// Creation time
	Created string `json:"created,omitempty"`

	// Specifies the name of the fileset. If no fileset is given the filesystem root will be snapped.
	FilesetName string `json:"filesetName,omitempty"`

	// The filesystem
	// Required: true
	FilesystemName *string `json:"filesystemName"`

	// Internal identifier used for paging
	Oid int64 `json:"oid,omitempty"`

	// quotas
	Quotas string `json:"quotas,omitempty"`

	// The identifier of the snapshot
	SnapID int32 `json:"snapID,omitempty"`

	// snap type
	SnapType string `json:"snapType,omitempty"`

	// The name of the snapshot to create
	// Required: true
	SnapshotName *string `json:"snapshotName"`

	// The status of the snapshot
	Status string `json:"status,omitempty"`
}

// Validate validates this snapshot
func (m *Snapshot) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFilesystemName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshotName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Snapshot) validateFilesystemName(formats strfmt.Registry) error {

	if err := validate.Required("filesystemName", "body", m.FilesystemName); err != nil {
		return err
	}

	return nil
}

func (m *Snapshot) validateSnapshotName(formats strfmt.Registry) error {

	if err := validate.Required("snapshotName", "body", m.SnapshotName); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Snapshot) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Snapshot) UnmarshalBinary(b []byte) error {
	var res Snapshot
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
