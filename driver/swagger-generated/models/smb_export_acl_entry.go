// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SmbExportACLEntry Individual Access Control List Entry of SMB shares
//
// swagger:model SmbExportAclEntry
type SmbExportACLEntry struct {

	// Either ALLOWED or DENIED.
	// Required: true
	// Enum: [ALLOWED DENIED]
	Access *string `json:"access"`

	// The name of the user, group or system.
	// Required: true
	Name *string `json:"name"`

	// Either FULL, CHANGE, READ or any combination of RWXDPO.
	// Required: true
	Permissions *string `json:"permissions"`

	// The name of the SMB share.
	// Required: true
	ShareName *string `json:"shareName"`

	// Either USER, GROUP, SYSTEM or SID. Used only when creating an access control entry
	// Required: true
	// Enum: [USER GROUP SYSTEM SID]
	Type *string `json:"type"`
}

// Validate validates this smb export Acl entry
func (m *SmbExportACLEntry) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccess(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShareName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var smbExportAclEntryTypeAccessPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ALLOWED","DENIED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		smbExportAclEntryTypeAccessPropEnum = append(smbExportAclEntryTypeAccessPropEnum, v)
	}
}

const (

	// SmbExportACLEntryAccessALLOWED captures enum value "ALLOWED"
	SmbExportACLEntryAccessALLOWED string = "ALLOWED"

	// SmbExportACLEntryAccessDENIED captures enum value "DENIED"
	SmbExportACLEntryAccessDENIED string = "DENIED"
)

// prop value enum
func (m *SmbExportACLEntry) validateAccessEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, smbExportAclEntryTypeAccessPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SmbExportACLEntry) validateAccess(formats strfmt.Registry) error {

	if err := validate.Required("access", "body", m.Access); err != nil {
		return err
	}

	// value enum
	if err := m.validateAccessEnum("access", "body", *m.Access); err != nil {
		return err
	}

	return nil
}

func (m *SmbExportACLEntry) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *SmbExportACLEntry) validatePermissions(formats strfmt.Registry) error {

	if err := validate.Required("permissions", "body", m.Permissions); err != nil {
		return err
	}

	return nil
}

func (m *SmbExportACLEntry) validateShareName(formats strfmt.Registry) error {

	if err := validate.Required("shareName", "body", m.ShareName); err != nil {
		return err
	}

	return nil
}

var smbExportAclEntryTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["USER","GROUP","SYSTEM","SID"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		smbExportAclEntryTypeTypePropEnum = append(smbExportAclEntryTypeTypePropEnum, v)
	}
}

const (

	// SmbExportACLEntryTypeUSER captures enum value "USER"
	SmbExportACLEntryTypeUSER string = "USER"

	// SmbExportACLEntryTypeGROUP captures enum value "GROUP"
	SmbExportACLEntryTypeGROUP string = "GROUP"

	// SmbExportACLEntryTypeSYSTEM captures enum value "SYSTEM"
	SmbExportACLEntryTypeSYSTEM string = "SYSTEM"

	// SmbExportACLEntryTypeSID captures enum value "SID"
	SmbExportACLEntryTypeSID string = "SID"
)

// prop value enum
func (m *SmbExportACLEntry) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, smbExportAclEntryTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SmbExportACLEntry) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SmbExportACLEntry) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SmbExportACLEntry) UnmarshalBinary(b []byte) error {
	var res SmbExportACLEntry
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
