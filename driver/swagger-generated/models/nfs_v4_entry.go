// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NfsV4Entry Individual entry of a NFSv4 access control list
//
// swagger:model NfsV4Entry
type NfsV4Entry struct {

	// The special flags of the entry [(f)ile inherit, (d)ir inherit, (i)nherit only, (I)nherited, (S)uccessful access, (F)ailed access]
	Flags string `json:"flags,omitempty"`

	// The permission bits (r)ead,(w)rite,(m)kdir,e(x)ecute,(d)elete,(D)elete child,read (a)ttr, write (A)ttr, read (n)amed, write (N)amed, read a(c)l, write a(C)l, change (o)wner, (s)ynchronize
	// Required: true
	Permissions *string `json:"permissions"`

	// Type of the entry
	// Required: true
	// Enum: [allow deny alarm audit]
	Type *string `json:"type"`

	// The user/group this entry will control access for (e.g. special:owner@,special:group@,special:everyone@,user:{name},group:{name}
	// Required: true
	Who *string `json:"who"`
}

// Validate validates this nfs v4 entry
func (m *NfsV4Entry) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWho(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NfsV4Entry) validatePermissions(formats strfmt.Registry) error {

	if err := validate.Required("permissions", "body", m.Permissions); err != nil {
		return err
	}

	return nil
}

var nfsV4EntryTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["allow","deny","alarm","audit"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nfsV4EntryTypeTypePropEnum = append(nfsV4EntryTypeTypePropEnum, v)
	}
}

const (

	// NfsV4EntryTypeAllow captures enum value "allow"
	NfsV4EntryTypeAllow string = "allow"

	// NfsV4EntryTypeDeny captures enum value "deny"
	NfsV4EntryTypeDeny string = "deny"

	// NfsV4EntryTypeAlarm captures enum value "alarm"
	NfsV4EntryTypeAlarm string = "alarm"

	// NfsV4EntryTypeAudit captures enum value "audit"
	NfsV4EntryTypeAudit string = "audit"
)

// prop value enum
func (m *NfsV4Entry) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, nfsV4EntryTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NfsV4Entry) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *NfsV4Entry) validateWho(formats strfmt.Registry) error {

	if err := validate.Required("who", "body", m.Who); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NfsV4Entry) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NfsV4Entry) UnmarshalBinary(b []byte) error {
	var res NfsV4Entry
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
