// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FsccDate fscc date
//
// swagger:model FsccDate
type FsccDate struct {

	// date
	// Format: date-time
	Date strfmt.DateTime `json:"date,omitempty"`

	// date as english string
	DateAsEnglishString string `json:"dateAsEnglishString,omitempty"`

	// date for cnbackup
	DateForCnbackup string `json:"dateForCnbackup,omitempty"`

	// day as string
	DayAsString string `json:"dayAsString,omitempty"`

	// fscc date
	FsccDate int64 `json:"fsccDate,omitempty"`

	// hour min sec as string
	HourMinSecAsString string `json:"hourMinSecAsString,omitempty"`

	// iso date time millis string
	IsoDateTimeMillisString string `json:"isoDateTimeMillisString,omitempty"`

	// iso date time string
	IsoDateTimeString string `json:"isoDateTimeString,omitempty"`

	// isodate as string
	IsodateAsString string `json:"isodateAsString,omitempty"`

	// month as string
	MonthAsString string `json:"monthAsString,omitempty"`

	// null
	Null bool `json:"null,omitempty"`

	// singleton
	Singleton bool `json:"singleton,omitempty"`

	// time as american string
	TimeAsAmericanString string `json:"timeAsAmericanString,omitempty"`

	// time as string
	TimeAsString string `json:"timeAsString,omitempty"`

	// us date time string
	UsDateTimeString string `json:"usDateTimeString,omitempty"`

	// year as string
	YearAsString string `json:"yearAsString,omitempty"`
}

// Validate validates this fscc date
func (m *FsccDate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FsccDate) validateDate(formats strfmt.Registry) error {

	if swag.IsZero(m.Date) { // not required
		return nil
	}

	if err := validate.FormatOf("date", "body", "date-time", m.Date.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FsccDate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FsccDate) UnmarshalBinary(b []byte) error {
	var res FsccDate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
