// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SensorConfig sensor config
//
// swagger:model SensorConfig
type SensorConfig struct {

	// The component this sensor belongs to.
	Component string `json:"component,omitempty"`

	// The current restriction value.
	CurrentRestriction string `json:"currentRestriction,omitempty"`

	// The default period of the sensor in seconds.
	DefaultPeriod int32 `json:"defaultPeriod,omitempty"`

	// The default restriction value.
	DefaultRestriction string `json:"defaultRestriction,omitempty"`

	// The description of the sensor.
	Description string `json:"description,omitempty"`

	// Specifies if the sensor is enabled per default.
	EnabledPerDefault bool `json:"enabledPerDefault,omitempty"`

	// Specifies if this is a generic sensor.
	Generic bool `json:"generic,omitempty"`

	// The recommended minimum period of the sensor in seconds.
	MinimumPeriod int32 `json:"minimumPeriod,omitempty"`

	// oid
	Oid int64 `json:"oid,omitempty"`

	// The period of the sensor in seconds.
	// Required: true
	Period *int32 `json:"period"`

	// A list of nodes and/or nodeclasses where the sensor is running on.
	// Required: true
	Restrict []string `json:"restrict"`

	// The type of restriction of this sensor.
	// Enum: [SINGLETON SYSTEMNODECLASS USERNODECLASS DESIGNATION NONE USERDEFINED]
	RestrictionType string `json:"restrictionType,omitempty"`

	// The name of the sensor.
	// Required: true
	SensorName *string `json:"sensorName"`
}

// Validate validates this sensor config
func (m *SensorConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestrict(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestrictionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSensorName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SensorConfig) validatePeriod(formats strfmt.Registry) error {

	if err := validate.Required("period", "body", m.Period); err != nil {
		return err
	}

	return nil
}

func (m *SensorConfig) validateRestrict(formats strfmt.Registry) error {

	if err := validate.Required("restrict", "body", m.Restrict); err != nil {
		return err
	}

	return nil
}

var sensorConfigTypeRestrictionTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SINGLETON","SYSTEMNODECLASS","USERNODECLASS","DESIGNATION","NONE","USERDEFINED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sensorConfigTypeRestrictionTypePropEnum = append(sensorConfigTypeRestrictionTypePropEnum, v)
	}
}

const (

	// SensorConfigRestrictionTypeSINGLETON captures enum value "SINGLETON"
	SensorConfigRestrictionTypeSINGLETON string = "SINGLETON"

	// SensorConfigRestrictionTypeSYSTEMNODECLASS captures enum value "SYSTEMNODECLASS"
	SensorConfigRestrictionTypeSYSTEMNODECLASS string = "SYSTEMNODECLASS"

	// SensorConfigRestrictionTypeUSERNODECLASS captures enum value "USERNODECLASS"
	SensorConfigRestrictionTypeUSERNODECLASS string = "USERNODECLASS"

	// SensorConfigRestrictionTypeDESIGNATION captures enum value "DESIGNATION"
	SensorConfigRestrictionTypeDESIGNATION string = "DESIGNATION"

	// SensorConfigRestrictionTypeNONE captures enum value "NONE"
	SensorConfigRestrictionTypeNONE string = "NONE"

	// SensorConfigRestrictionTypeUSERDEFINED captures enum value "USERDEFINED"
	SensorConfigRestrictionTypeUSERDEFINED string = "USERDEFINED"
)

// prop value enum
func (m *SensorConfig) validateRestrictionTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, sensorConfigTypeRestrictionTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SensorConfig) validateRestrictionType(formats strfmt.Registry) error {

	if swag.IsZero(m.RestrictionType) { // not required
		return nil
	}

	// value enum
	if err := m.validateRestrictionTypeEnum("restrictionType", "body", m.RestrictionType); err != nil {
		return err
	}

	return nil
}

func (m *SensorConfig) validateSensorName(formats strfmt.Registry) error {

	if err := validate.Required("sensorName", "body", m.SensorName); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SensorConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SensorConfig) UnmarshalBinary(b []byte) error {
	var res SensorConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
