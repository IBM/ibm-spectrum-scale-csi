// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Filesystem Detailed information about a cluster filesystem
//
// swagger:model Filesystem
type Filesystem struct {

	// block
	Block *FilesystemBlock `json:"block,omitempty"`

	// File system creation time
	CreateTime string `json:"createTime,omitempty"`

	// file audit log config
	FileAuditLogConfig *FileAuditLogConfig `json:"fileAuditLogConfig,omitempty"`

	// mount
	Mount *FilesystemMount `json:"mount,omitempty"`

	// The name of the filesystem
	Name string `json:"name,omitempty"`

	// Internal identifier used for paging
	Oid int64 `json:"oid,omitempty"`

	// quota
	Quota *FilesystemQuota `json:"quota,omitempty"`

	// replication
	Replication *FilesystemReplication `json:"replication,omitempty"`

	// settings
	Settings *FilesystemSettings `json:"settings,omitempty"`

	// Filesystem type, either 'local' or 'remote'
	Type string `json:"type,omitempty"`

	// The UUID of the filesystem
	UUID string `json:"uuid,omitempty"`

	// File system version
	Version string `json:"version,omitempty"`
}

// Validate validates this filesystem
func (m *Filesystem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBlock(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileAuditLogConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuota(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplication(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSettings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Filesystem) validateBlock(formats strfmt.Registry) error {

	if swag.IsZero(m.Block) { // not required
		return nil
	}

	if m.Block != nil {
		if err := m.Block.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block")
			}
			return err
		}
	}

	return nil
}

func (m *Filesystem) validateFileAuditLogConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.FileAuditLogConfig) { // not required
		return nil
	}

	if m.FileAuditLogConfig != nil {
		if err := m.FileAuditLogConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fileAuditLogConfig")
			}
			return err
		}
	}

	return nil
}

func (m *Filesystem) validateMount(formats strfmt.Registry) error {

	if swag.IsZero(m.Mount) { // not required
		return nil
	}

	if m.Mount != nil {
		if err := m.Mount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mount")
			}
			return err
		}
	}

	return nil
}

func (m *Filesystem) validateQuota(formats strfmt.Registry) error {

	if swag.IsZero(m.Quota) { // not required
		return nil
	}

	if m.Quota != nil {
		if err := m.Quota.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quota")
			}
			return err
		}
	}

	return nil
}

func (m *Filesystem) validateReplication(formats strfmt.Registry) error {

	if swag.IsZero(m.Replication) { // not required
		return nil
	}

	if m.Replication != nil {
		if err := m.Replication.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replication")
			}
			return err
		}
	}

	return nil
}

func (m *Filesystem) validateSettings(formats strfmt.Registry) error {

	if swag.IsZero(m.Settings) { // not required
		return nil
	}

	if m.Settings != nil {
		if err := m.Settings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("settings")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Filesystem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Filesystem) UnmarshalBinary(b []byte) error {
	var res Filesystem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
