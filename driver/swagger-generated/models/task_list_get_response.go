// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TaskListGetResponse task list get response
//
// swagger:model TaskListGetResponse
type TaskListGetResponse struct {

	// activities
	// Required: true
	Activities []*TaskActivityResponse `json:"activities"`

	// available actions
	// Required: true
	AvailableActions []string `json:"availableActions"`

	// env Id
	// Required: true
	EnvID *string `json:"envId"`

	// id
	// Required: true
	ID *string `json:"id"`

	// org Id
	// Required: true
	OrgID *string `json:"orgId"`

	// status
	// Required: true
	// Enum: [cancelled rejected approved pending]
	Status *string `json:"status"`

	// task properties
	TaskProperties string `json:"taskProperties,omitempty"`

	// task type
	// Required: true
	// Enum: [planSubscriptionApproval productDeploymentApproval planDeploymentApproval]
	TaskType *string `json:"taskType"`

	// url
	// Required: true
	URL *string `json:"url"`
}

// Validate validates this task list get response
func (m *TaskListGetResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActivities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAvailableActions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrgID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaskListGetResponse) validateActivities(formats strfmt.Registry) error {

	if err := validate.Required("activities", "body", m.Activities); err != nil {
		return err
	}

	for i := 0; i < len(m.Activities); i++ {
		if swag.IsZero(m.Activities[i]) { // not required
			continue
		}

		if m.Activities[i] != nil {
			if err := m.Activities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("activities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TaskListGetResponse) validateAvailableActions(formats strfmt.Registry) error {

	if err := validate.Required("availableActions", "body", m.AvailableActions); err != nil {
		return err
	}

	return nil
}

func (m *TaskListGetResponse) validateEnvID(formats strfmt.Registry) error {

	if err := validate.Required("envId", "body", m.EnvID); err != nil {
		return err
	}

	return nil
}

func (m *TaskListGetResponse) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *TaskListGetResponse) validateOrgID(formats strfmt.Registry) error {

	if err := validate.Required("orgId", "body", m.OrgID); err != nil {
		return err
	}

	return nil
}

var taskListGetResponseTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["cancelled","rejected","approved","pending"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		taskListGetResponseTypeStatusPropEnum = append(taskListGetResponseTypeStatusPropEnum, v)
	}
}

const (

	// TaskListGetResponseStatusCancelled captures enum value "cancelled"
	TaskListGetResponseStatusCancelled string = "cancelled"

	// TaskListGetResponseStatusRejected captures enum value "rejected"
	TaskListGetResponseStatusRejected string = "rejected"

	// TaskListGetResponseStatusApproved captures enum value "approved"
	TaskListGetResponseStatusApproved string = "approved"

	// TaskListGetResponseStatusPending captures enum value "pending"
	TaskListGetResponseStatusPending string = "pending"
)

// prop value enum
func (m *TaskListGetResponse) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, taskListGetResponseTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TaskListGetResponse) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

var taskListGetResponseTypeTaskTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["planSubscriptionApproval","productDeploymentApproval","planDeploymentApproval"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		taskListGetResponseTypeTaskTypePropEnum = append(taskListGetResponseTypeTaskTypePropEnum, v)
	}
}

const (

	// TaskListGetResponseTaskTypePlanSubscriptionApproval captures enum value "planSubscriptionApproval"
	TaskListGetResponseTaskTypePlanSubscriptionApproval string = "planSubscriptionApproval"

	// TaskListGetResponseTaskTypeProductDeploymentApproval captures enum value "productDeploymentApproval"
	TaskListGetResponseTaskTypeProductDeploymentApproval string = "productDeploymentApproval"

	// TaskListGetResponseTaskTypePlanDeploymentApproval captures enum value "planDeploymentApproval"
	TaskListGetResponseTaskTypePlanDeploymentApproval string = "planDeploymentApproval"
)

// prop value enum
func (m *TaskListGetResponse) validateTaskTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, taskListGetResponseTypeTaskTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TaskListGetResponse) validateTaskType(formats strfmt.Registry) error {

	if err := validate.Required("taskType", "body", m.TaskType); err != nil {
		return err
	}

	// value enum
	if err := m.validateTaskTypeEnum("taskType", "body", *m.TaskType); err != nil {
		return err
	}

	return nil
}

func (m *TaskListGetResponse) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("url", "body", m.URL); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TaskListGetResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskListGetResponse) UnmarshalBinary(b []byte) error {
	var res TaskListGetResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
