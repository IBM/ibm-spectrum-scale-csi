// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PDisk Summary information about a physical disk
//
// swagger:model PDisk
type PDisk struct {

	// The capacity of the pdisk in bytes
	Capacity int64 `json:"capacity,omitempty"`

	// The name of the declustered array of the pdisk
	DeclusteredArray string `json:"declusteredArray,omitempty"`

	// details
	Details *PDiskDetails `json:"details,omitempty"`

	// The free space of the pdisk in bytes
	FreeSpace int64 `json:"freeSpace,omitempty"`

	// The health state of the pdisk
	HealthState string `json:"healthState,omitempty"`

	// metrics
	Metrics *PDiskMetrics `json:"metrics,omitempty"`

	// The name of the pdisk
	Name string `json:"name,omitempty"`

	// The number of paths for the pdisk
	PathCount int32 `json:"pathCount,omitempty"`

	// paths
	Paths *PDiskPaths `json:"paths,omitempty"`

	// The name of the recovery group of the pdisk
	RecoveryGroup string `json:"recoveryGroup,omitempty"`

	// The state of the pdisk
	State string `json:"state,omitempty"`

	// The state information about the pdisk
	StateInfo string `json:"stateInfo,omitempty"`
}

// Validate validates this p disk
func (m *PDisk) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetrics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaths(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PDisk) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.Details) { // not required
		return nil
	}

	if m.Details != nil {
		if err := m.Details.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("details")
			}
			return err
		}
	}

	return nil
}

func (m *PDisk) validateMetrics(formats strfmt.Registry) error {

	if swag.IsZero(m.Metrics) { // not required
		return nil
	}

	if m.Metrics != nil {
		if err := m.Metrics.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metrics")
			}
			return err
		}
	}

	return nil
}

func (m *PDisk) validatePaths(formats strfmt.Registry) error {

	if swag.IsZero(m.Paths) { // not required
		return nil
	}

	if m.Paths != nil {
		if err := m.Paths.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paths")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PDisk) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PDisk) UnmarshalBinary(b []byte) error {
	var res PDisk
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
