// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FilesetConfig Object that can be used to change an existing fileset
//
// swagger:model FilesetConfig
type FilesetConfig struct {

	// The comment for this fileset
	Comment string `json:"comment,omitempty"`

	// Creation time
	Created string `json:"created,omitempty"`

	// Specifies the integrated archive manager (IAM) mode for the fileset.
	// Enum: [compliant-plus compliant noncompliant advisory off]
	IamMode string `json:"iamMode,omitempty"`

	// Fileset identifier
	ID int64 `json:"id,omitempty"`

	// Inode space
	InodeSpace int64 `json:"inodeSpace,omitempty"`

	// The inode space mask
	InodeSpaceMask int64 `json:"inodeSpaceMask,omitempty"`

	// Specifies if this is an independent fileset (1 = yes, 0 = no)
	IsInodeSpaceOwner bool `json:"isInodeSpaceOwner,omitempty"`

	// Maximum number of inodes allowed
	MaxNumInodes int64 `json:"maxNumInodes,omitempty"`

	// Internal identifier of the fileset, used for paging
	Oid int64 `json:"oid,omitempty"`

	// Parent fileset identifier, if not deleted
	ParentID int64 `json:"parentId,omitempty"`

	// The path where the fileset is linked
	Path string `json:"path,omitempty"`

	// Specifies the permission change mode.
	// Enum: [chmodOnly setAclOnly chmodAndSetAcl chmodAndUpdateAcl]
	PermissionChangeMode string `json:"permissionChangeMode,omitempty"`

	// Root inode number, if not deleted
	RootInode int64 `json:"rootInode,omitempty"`

	// Latest including snapshot, if deleted
	SnapID int64 `json:"snapId,omitempty"`

	// Specifies if the fileset is linked or unlinked
	// Enum: [Linked Unlinked]
	Status string `json:"status,omitempty"`
}

// Validate validates this fileset config
func (m *FilesetConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIamMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermissionChangeMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var filesetConfigTypeIamModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["compliant-plus","compliant","noncompliant","advisory","off"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		filesetConfigTypeIamModePropEnum = append(filesetConfigTypeIamModePropEnum, v)
	}
}

const (

	// FilesetConfigIamModeCompliantPlus captures enum value "compliant-plus"
	FilesetConfigIamModeCompliantPlus string = "compliant-plus"

	// FilesetConfigIamModeCompliant captures enum value "compliant"
	FilesetConfigIamModeCompliant string = "compliant"

	// FilesetConfigIamModeNoncompliant captures enum value "noncompliant"
	FilesetConfigIamModeNoncompliant string = "noncompliant"

	// FilesetConfigIamModeAdvisory captures enum value "advisory"
	FilesetConfigIamModeAdvisory string = "advisory"

	// FilesetConfigIamModeOff captures enum value "off"
	FilesetConfigIamModeOff string = "off"
)

// prop value enum
func (m *FilesetConfig) validateIamModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, filesetConfigTypeIamModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FilesetConfig) validateIamMode(formats strfmt.Registry) error {

	if swag.IsZero(m.IamMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateIamModeEnum("iamMode", "body", m.IamMode); err != nil {
		return err
	}

	return nil
}

var filesetConfigTypePermissionChangeModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["chmodOnly","setAclOnly","chmodAndSetAcl","chmodAndUpdateAcl"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		filesetConfigTypePermissionChangeModePropEnum = append(filesetConfigTypePermissionChangeModePropEnum, v)
	}
}

const (

	// FilesetConfigPermissionChangeModeChmodOnly captures enum value "chmodOnly"
	FilesetConfigPermissionChangeModeChmodOnly string = "chmodOnly"

	// FilesetConfigPermissionChangeModeSetACLOnly captures enum value "setAclOnly"
	FilesetConfigPermissionChangeModeSetACLOnly string = "setAclOnly"

	// FilesetConfigPermissionChangeModeChmodAndSetACL captures enum value "chmodAndSetAcl"
	FilesetConfigPermissionChangeModeChmodAndSetACL string = "chmodAndSetAcl"

	// FilesetConfigPermissionChangeModeChmodAndUpdateACL captures enum value "chmodAndUpdateAcl"
	FilesetConfigPermissionChangeModeChmodAndUpdateACL string = "chmodAndUpdateAcl"
)

// prop value enum
func (m *FilesetConfig) validatePermissionChangeModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, filesetConfigTypePermissionChangeModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FilesetConfig) validatePermissionChangeMode(formats strfmt.Registry) error {

	if swag.IsZero(m.PermissionChangeMode) { // not required
		return nil
	}

	// value enum
	if err := m.validatePermissionChangeModeEnum("permissionChangeMode", "body", m.PermissionChangeMode); err != nil {
		return err
	}

	return nil
}

var filesetConfigTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Linked","Unlinked"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		filesetConfigTypeStatusPropEnum = append(filesetConfigTypeStatusPropEnum, v)
	}
}

const (

	// FilesetConfigStatusLinked captures enum value "Linked"
	FilesetConfigStatusLinked string = "Linked"

	// FilesetConfigStatusUnlinked captures enum value "Unlinked"
	FilesetConfigStatusUnlinked string = "Unlinked"
)

// prop value enum
func (m *FilesetConfig) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, filesetConfigTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FilesetConfig) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FilesetConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FilesetConfig) UnmarshalBinary(b []byte) error {
	var res FilesetConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
