// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceState Summary information about a service state
//
// swagger:model ServiceState
type ServiceState struct {

	// Determines if the service is running or not
	Running string `json:"running,omitempty"`

	// The name of the service
	// Enum: [OBJ SMB NFS]
	Service string `json:"service,omitempty"`
}

// Validate validates this service state
func (m *ServiceState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateService(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var serviceStateTypeServicePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OBJ","SMB","NFS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceStateTypeServicePropEnum = append(serviceStateTypeServicePropEnum, v)
	}
}

const (

	// ServiceStateServiceOBJ captures enum value "OBJ"
	ServiceStateServiceOBJ string = "OBJ"

	// ServiceStateServiceSMB captures enum value "SMB"
	ServiceStateServiceSMB string = "SMB"

	// ServiceStateServiceNFS captures enum value "NFS"
	ServiceStateServiceNFS string = "NFS"
)

// prop value enum
func (m *ServiceState) validateServiceEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serviceStateTypeServicePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServiceState) validateService(formats strfmt.Registry) error {

	if swag.IsZero(m.Service) { // not required
		return nil
	}

	// value enum
	if err := m.validateServiceEnum("service", "body", m.Service); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceState) UnmarshalBinary(b []byte) error {
	var res ServiceState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
