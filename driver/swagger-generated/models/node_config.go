// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NodeConfig Summary information about a Node
//
// swagger:model NodeConfig
type NodeConfig struct {

	// The name of the admin login
	AdminLoginName string `json:"adminLoginName,omitempty"`

	// The license this node is running on
	DesignatedLicense string `json:"designatedLicense,omitempty"`

	// The product edition this node is running
	ProductEdition string `json:"productEdition,omitempty"`

	// Controls the type of GPFS required license associated with the nodes in the cluster.
	// Enum: [client fpo server]
	RequiredLicense string `json:"requiredLicense,omitempty"`
}

// Validate validates this node config
func (m *NodeConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRequiredLicense(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var nodeConfigTypeRequiredLicensePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["client","fpo","server"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nodeConfigTypeRequiredLicensePropEnum = append(nodeConfigTypeRequiredLicensePropEnum, v)
	}
}

const (

	// NodeConfigRequiredLicenseClient captures enum value "client"
	NodeConfigRequiredLicenseClient string = "client"

	// NodeConfigRequiredLicenseFpo captures enum value "fpo"
	NodeConfigRequiredLicenseFpo string = "fpo"

	// NodeConfigRequiredLicenseServer captures enum value "server"
	NodeConfigRequiredLicenseServer string = "server"
)

// prop value enum
func (m *NodeConfig) validateRequiredLicenseEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, nodeConfigTypeRequiredLicensePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NodeConfig) validateRequiredLicense(formats strfmt.Registry) error {

	if swag.IsZero(m.RequiredLicense) { // not required
		return nil
	}

	// value enum
	if err := m.validateRequiredLicenseEnum("requiredLicense", "body", m.RequiredLicense); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NodeConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodeConfig) UnmarshalBinary(b []byte) error {
	var res NodeConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
