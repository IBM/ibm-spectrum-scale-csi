// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SystemHealthEvent Summary information about a System Health event
//
// swagger:model SystemHealthEvent
type SystemHealthEvent struct {

	// The time the event occurred.
	ActiveSince string `json:"activeSince,omitempty"`

	// The component the event belongs to.
	Component string `json:"component,omitempty"`

	// The description of the event.
	Description string `json:"description,omitempty"`

	// The name of the entity the event occurred for. (parent/child)
	EntityName string `json:"entityName,omitempty"`

	// The type of the entity the event occurred for.
	EntityType string `json:"entityType,omitempty"`

	// The message of the event.
	Message string `json:"message,omitempty"`

	// The name of the event.
	Name string `json:"name,omitempty"`

	// The internal unique id of the event.
	Oid int32 `json:"oid,omitempty"`

	// parent and entity name
	ParentAndEntityName string `json:"parentAndEntityName,omitempty"`

	// The name of the parent this event belongs to.
	ParentName string `json:"parentName,omitempty"`

	// The name of the node where this event occurred.
	ReportingNode string `json:"reportingNode,omitempty"`

	// The severity of the event.
	Severity string `json:"severity,omitempty"`

	// The state the event leads to.
	State string `json:"state,omitempty"`

	// The event type
	// Enum: [TIP STATE_CHANGE NOTICE]
	Type string `json:"type,omitempty"`

	// The action the user can perform to resolve the event.
	UserAction string `json:"userAction,omitempty"`
}

// Validate validates this system health event
func (m *SystemHealthEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var systemHealthEventTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["TIP","STATE_CHANGE","NOTICE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		systemHealthEventTypeTypePropEnum = append(systemHealthEventTypeTypePropEnum, v)
	}
}

const (

	// SystemHealthEventTypeTIP captures enum value "TIP"
	SystemHealthEventTypeTIP string = "TIP"

	// SystemHealthEventTypeSTATECHANGE captures enum value "STATE_CHANGE"
	SystemHealthEventTypeSTATECHANGE string = "STATE_CHANGE"

	// SystemHealthEventTypeNOTICE captures enum value "NOTICE"
	SystemHealthEventTypeNOTICE string = "NOTICE"
)

// prop value enum
func (m *SystemHealthEvent) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, systemHealthEventTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SystemHealthEvent) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SystemHealthEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SystemHealthEvent) UnmarshalBinary(b []byte) error {
	var res SystemHealthEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
