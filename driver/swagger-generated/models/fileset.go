// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Fileset Summary information about a fileset
//
// swagger:model Fileset
type Fileset struct {

	// afm
	Afm *FilesetAfm `json:"afm,omitempty"`

	// config
	Config *FilesetConfig `json:"config,omitempty"`

	// The name of the fileset
	FilesetName string `json:"filesetName,omitempty"`

	// The filesystem name
	// Required: true
	FilesystemName *string `json:"filesystemName"`

	// usage
	Usage *FilesetUsage `json:"usage,omitempty"`
}

// Validate validates this fileset
func (m *Fileset) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAfm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFilesystemName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Fileset) validateAfm(formats strfmt.Registry) error {

	if swag.IsZero(m.Afm) { // not required
		return nil
	}

	if m.Afm != nil {
		if err := m.Afm.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("afm")
			}
			return err
		}
	}

	return nil
}

func (m *Fileset) validateConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.Config) { // not required
		return nil
	}

	if m.Config != nil {
		if err := m.Config.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config")
			}
			return err
		}
	}

	return nil
}

func (m *Fileset) validateFilesystemName(formats strfmt.Registry) error {

	if err := validate.Required("filesystemName", "body", m.FilesystemName); err != nil {
		return err
	}

	return nil
}

func (m *Fileset) validateUsage(formats strfmt.Registry) error {

	if swag.IsZero(m.Usage) { // not required
		return nil
	}

	if m.Usage != nil {
		if err := m.Usage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("usage")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Fileset) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Fileset) UnmarshalBinary(b []byte) error {
	var res Fileset
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
