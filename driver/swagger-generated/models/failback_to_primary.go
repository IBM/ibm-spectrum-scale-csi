// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FailbackToPrimary failback to primary
//
// swagger:model FailbackToPrimary
type FailbackToPrimary struct {

	// The action of the failback
	// Required: true
	// Enum: [start stop]
	Action *string `json:"action"`

	// Used if stop or start does not complete successfully due to any errors, and not allow failbackToPrimary to stop or start again.
	Force bool `json:"force,omitempty"`
}

// Validate validates this failback to primary
func (m *FailbackToPrimary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var failbackToPrimaryTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["start","stop"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		failbackToPrimaryTypeActionPropEnum = append(failbackToPrimaryTypeActionPropEnum, v)
	}
}

const (

	// FailbackToPrimaryActionStart captures enum value "start"
	FailbackToPrimaryActionStart string = "start"

	// FailbackToPrimaryActionStop captures enum value "stop"
	FailbackToPrimaryActionStop string = "stop"
)

// prop value enum
func (m *FailbackToPrimary) validateActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, failbackToPrimaryTypeActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FailbackToPrimary) validateAction(formats strfmt.Registry) error {

	if err := validate.Required("action", "body", m.Action); err != nil {
		return err
	}

	// value enum
	if err := m.validateActionEnum("action", "body", *m.Action); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FailbackToPrimary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FailbackToPrimary) UnmarshalBinary(b []byte) error {
	var res FailbackToPrimary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
