// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AfmCtl afm ctl
//
// swagger:model AfmCtl
type AfmCtl struct {

	// apply updates
	ApplyUpdates ApplyUpdates `json:"applyUpdates,omitempty"`

	// called setter count
	CalledSetterCount int32 `json:"calledSetterCount,omitempty"`

	// change secondary
	ChangeSecondary *ChangeSecondary `json:"changeSecondary,omitempty"`

	// convert to primary
	ConvertToPrimary *ConvertToPrimary `json:"convertToPrimary,omitempty"`

	// convert to secondary
	ConvertToSecondary *ConvertToSecondary `json:"convertToSecondary,omitempty"`

	// failback
	Failback *Failback `json:"failback,omitempty"`

	// failback to primary
	FailbackToPrimary *FailbackToPrimary `json:"failbackToPrimary,omitempty"`

	// failover to secondary
	FailoverToSecondary *FailoverToSecondary `json:"failoverToSecondary,omitempty"`

	// replace primary
	ReplacePrimary ReplacePrimary `json:"replacePrimary,omitempty"`
}

// Validate validates this afm ctl
func (m *AfmCtl) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChangeSecondary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConvertToPrimary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConvertToSecondary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailback(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailbackToPrimary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailoverToSecondary(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AfmCtl) validateChangeSecondary(formats strfmt.Registry) error {

	if swag.IsZero(m.ChangeSecondary) { // not required
		return nil
	}

	if m.ChangeSecondary != nil {
		if err := m.ChangeSecondary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("changeSecondary")
			}
			return err
		}
	}

	return nil
}

func (m *AfmCtl) validateConvertToPrimary(formats strfmt.Registry) error {

	if swag.IsZero(m.ConvertToPrimary) { // not required
		return nil
	}

	if m.ConvertToPrimary != nil {
		if err := m.ConvertToPrimary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("convertToPrimary")
			}
			return err
		}
	}

	return nil
}

func (m *AfmCtl) validateConvertToSecondary(formats strfmt.Registry) error {

	if swag.IsZero(m.ConvertToSecondary) { // not required
		return nil
	}

	if m.ConvertToSecondary != nil {
		if err := m.ConvertToSecondary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("convertToSecondary")
			}
			return err
		}
	}

	return nil
}

func (m *AfmCtl) validateFailback(formats strfmt.Registry) error {

	if swag.IsZero(m.Failback) { // not required
		return nil
	}

	if m.Failback != nil {
		if err := m.Failback.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("failback")
			}
			return err
		}
	}

	return nil
}

func (m *AfmCtl) validateFailbackToPrimary(formats strfmt.Registry) error {

	if swag.IsZero(m.FailbackToPrimary) { // not required
		return nil
	}

	if m.FailbackToPrimary != nil {
		if err := m.FailbackToPrimary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("failbackToPrimary")
			}
			return err
		}
	}

	return nil
}

func (m *AfmCtl) validateFailoverToSecondary(formats strfmt.Registry) error {

	if swag.IsZero(m.FailoverToSecondary) { // not required
		return nil
	}

	if m.FailoverToSecondary != nil {
		if err := m.FailoverToSecondary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("failoverToSecondary")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AfmCtl) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AfmCtl) UnmarshalBinary(b []byte) error {
	var res AfmCtl
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
