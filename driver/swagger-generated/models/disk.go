// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Disk Summary information about a disk/nsd
//
// swagger:model Disk
type Disk struct {

	// The availability of the disk.
	// Required: true
	Availability *string `json:"availability"`

	// The available blocks of the disk in Bytes.
	// Required: true
	AvailableBlocks *int64 `json:"availableBlocks"`

	// The available fragments of the disk in Bytes.
	// Required: true
	AvailableFragments *int64 `json:"availableFragments"`

	// The id of the Failure group.
	// Required: true
	FailureGroup *string `json:"failureGroup"`

	// The device name of the file system to which the disks belong.
	// Required: true
	FileSystem *string `json:"fileSystem"`

	// The name of the disk.
	// Required: true
	Name *string `json:"name"`

	// The name of the NSD servers.
	// Required: true
	NsdServers *string `json:"nsdServers"`

	// The volume id of the NSD.
	// Required: true
	NsdVolumeID *string `json:"nsdVolumeId"`

	// The quorum status of the disk.
	// Required: true
	QuorumDisk *bool `json:"quorumDisk"`

	// The comment of the disk.
	// Required: true
	Remarks *string `json:"remarks"`

	// The size of the disk in Bytes.
	// Required: true
	Size *int64 `json:"size"`

	// The status of the disk.
	// Required: true
	Status *string `json:"status"`

	// The name of the pool.
	// Required: true
	StoragePool *string `json:"storagePool"`

	// The type of the disk.
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this disk
func (m *Disk) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailability(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAvailableBlocks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAvailableFragments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailureGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileSystem(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNsdServers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNsdVolumeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuorumDisk(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemarks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStoragePool(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Disk) validateAvailability(formats strfmt.Registry) error {

	if err := validate.Required("availability", "body", m.Availability); err != nil {
		return err
	}

	return nil
}

func (m *Disk) validateAvailableBlocks(formats strfmt.Registry) error {

	if err := validate.Required("availableBlocks", "body", m.AvailableBlocks); err != nil {
		return err
	}

	return nil
}

func (m *Disk) validateAvailableFragments(formats strfmt.Registry) error {

	if err := validate.Required("availableFragments", "body", m.AvailableFragments); err != nil {
		return err
	}

	return nil
}

func (m *Disk) validateFailureGroup(formats strfmt.Registry) error {

	if err := validate.Required("failureGroup", "body", m.FailureGroup); err != nil {
		return err
	}

	return nil
}

func (m *Disk) validateFileSystem(formats strfmt.Registry) error {

	if err := validate.Required("fileSystem", "body", m.FileSystem); err != nil {
		return err
	}

	return nil
}

func (m *Disk) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Disk) validateNsdServers(formats strfmt.Registry) error {

	if err := validate.Required("nsdServers", "body", m.NsdServers); err != nil {
		return err
	}

	return nil
}

func (m *Disk) validateNsdVolumeID(formats strfmt.Registry) error {

	if err := validate.Required("nsdVolumeId", "body", m.NsdVolumeID); err != nil {
		return err
	}

	return nil
}

func (m *Disk) validateQuorumDisk(formats strfmt.Registry) error {

	if err := validate.Required("quorumDisk", "body", m.QuorumDisk); err != nil {
		return err
	}

	return nil
}

func (m *Disk) validateRemarks(formats strfmt.Registry) error {

	if err := validate.Required("remarks", "body", m.Remarks); err != nil {
		return err
	}

	return nil
}

func (m *Disk) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("size", "body", m.Size); err != nil {
		return err
	}

	return nil
}

func (m *Disk) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *Disk) validateStoragePool(formats strfmt.Registry) error {

	if err := validate.Required("storagePool", "body", m.StoragePool); err != nil {
		return err
	}

	return nil
}

func (m *Disk) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Disk) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Disk) UnmarshalBinary(b []byte) error {
	var res Disk
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
