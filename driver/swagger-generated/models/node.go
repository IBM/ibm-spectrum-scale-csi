// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Node Summary information about a Node
//
// swagger:model Node
type Node struct {

	// The hostname used by the GPFS admin network
	AdminNodeName string `json:"adminNodeName,omitempty"`

	// ces info
	CesInfo *CESNodeInfo `json:"cesInfo,omitempty"`

	// cnfs info
	CnfsInfo *CnfsNodeInfo `json:"cnfsInfo,omitempty"`

	// config
	Config *NodeConfig `json:"config,omitempty"`

	// network
	Network *NodeNetworkInfo `json:"network,omitempty"`

	// The GPFS node id
	NodeNumber int32 `json:"nodeNumber,omitempty"`

	// roles
	Roles *NodeRoles `json:"roles,omitempty"`

	// status
	Status *NodeStatus `json:"status,omitempty"`
}

// Validate validates this node
func (m *Node) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCesInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCnfsInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetwork(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Node) validateCesInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.CesInfo) { // not required
		return nil
	}

	if m.CesInfo != nil {
		if err := m.CesInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cesInfo")
			}
			return err
		}
	}

	return nil
}

func (m *Node) validateCnfsInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.CnfsInfo) { // not required
		return nil
	}

	if m.CnfsInfo != nil {
		if err := m.CnfsInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cnfsInfo")
			}
			return err
		}
	}

	return nil
}

func (m *Node) validateConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.Config) { // not required
		return nil
	}

	if m.Config != nil {
		if err := m.Config.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config")
			}
			return err
		}
	}

	return nil
}

func (m *Node) validateNetwork(formats strfmt.Registry) error {

	if swag.IsZero(m.Network) { // not required
		return nil
	}

	if m.Network != nil {
		if err := m.Network.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network")
			}
			return err
		}
	}

	return nil
}

func (m *Node) validateRoles(formats strfmt.Registry) error {

	if swag.IsZero(m.Roles) { // not required
		return nil
	}

	if m.Roles != nil {
		if err := m.Roles.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("roles")
			}
			return err
		}
	}

	return nil
}

func (m *Node) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Node) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Node) UnmarshalBinary(b []byte) error {
	var res Node
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
