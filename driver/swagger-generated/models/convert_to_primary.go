// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConvertToPrimary convert to primary
//
// swagger:model ConvertToPrimary
type ConvertToPrimary struct {

	// Specifies the secondary that needs to be configured for this primary. Need not be used for AFM filesets as target would already have been defined.
	// Required: true
	Afmtarget *string `json:"afmtarget"`

	// Used for inband trucking. Inband trucking is copying the data while setting up a primary/secondary relationship from GPFS filesets, where primary site has contents and secondary site is empty.
	Inband bool `json:"inband,omitempty"`

	// Used if one needs to proceed with conversion without checking for appendonly/immutable files.
	NoCheckMetadata bool `json:"noCheckMetadata,omitempty"`

	// Specifies the RPO interval in minutes for this primary fileset.
	Rpo string `json:"rpo,omitempty"`

	// Used while establishing a new primary for an existing secondary or acting primary during failback.
	// Required: true
	SecondarySnapName *string `json:"secondarySnapName"`
}

// Validate validates this convert to primary
func (m *ConvertToPrimary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAfmtarget(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecondarySnapName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConvertToPrimary) validateAfmtarget(formats strfmt.Registry) error {

	if err := validate.Required("afmtarget", "body", m.Afmtarget); err != nil {
		return err
	}

	return nil
}

func (m *ConvertToPrimary) validateSecondarySnapName(formats strfmt.Registry) error {

	if err := validate.Required("secondarySnapName", "body", m.SecondarySnapName); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConvertToPrimary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConvertToPrimary) UnmarshalBinary(b []byte) error {
	var res ConvertToPrimary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
