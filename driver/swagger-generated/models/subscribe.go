// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Subscribe subscribe
//
// swagger:model Subscribe
type Subscribe struct {

	// Is the plan visible.
	// Required: true
	Enabled *bool `json:"enabled"`

	// When subscribe is custom: The Organizations allowed to subscribe.
	Orgs []string `json:"orgs"`

	// When subscribe is custom: The Communities allowed to subscribe.
	Tags []string `json:"tags"`

	// type
	// Required: true
	// Enum: [authenticated custom]
	Type *string `json:"type"`
}

// Validate validates this subscribe
func (m *Subscribe) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Subscribe) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

var subscribeTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["authenticated","custom"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		subscribeTypeTypePropEnum = append(subscribeTypeTypePropEnum, v)
	}
}

const (

	// SubscribeTypeAuthenticated captures enum value "authenticated"
	SubscribeTypeAuthenticated string = "authenticated"

	// SubscribeTypeCustom captures enum value "custom"
	SubscribeTypeCustom string = "custom"
)

// prop value enum
func (m *Subscribe) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, subscribeTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Subscribe) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Subscribe) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Subscribe) UnmarshalBinary(b []byte) error {
	var res Subscribe
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
