// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Quota Detailed information about a quota
//
// swagger:model Quota
type Quota struct {

	// grace period
	BlockGrace string `json:"blockGrace,omitempty"`

	// space in doubt
	BlockInDoubt int64 `json:"blockInDoubt,omitempty"`

	// hard limit
	BlockLimit int64 `json:"blockLimit,omitempty"`

	// soft limit
	BlockQuota int64 `json:"blockQuota,omitempty"`

	// current block usage
	BlockUsage int64 `json:"blockUsage,omitempty"`

	// default quota
	DefaultQuota bool `json:"defaultQuota,omitempty"`

	// grace period
	FilesGrace string `json:"filesGrace,omitempty"`

	// files in doubt
	FilesInDoubt int64 `json:"filesInDoubt,omitempty"`

	// hard limit
	FilesLimit int64 `json:"filesLimit,omitempty"`

	// soft limit
	FilesQuota int64 `json:"filesQuota,omitempty"`

	// current number of files
	FilesUsage int64 `json:"filesUsage,omitempty"`

	// The fileset context of this quota. User and group quotas may will a fileset context if perFilesetQuota is enabled on the filesystem.
	FilesetName string `json:"filesetName,omitempty"`

	// The filesystem context of this quota
	FilesystemName string `json:"filesystemName,omitempty"`

	// Fileset/user/group id
	ObjectID int64 `json:"objectId,omitempty"`

	// Fileset/User/Group name
	ObjectName string `json:"objectName,omitempty"`

	// Internal id used for paging
	QuotaID int64 `json:"quotaId,omitempty"`

	// The quota type
	// Enum: [USR GRP FILESET]
	QuotaType string `json:"quotaType,omitempty"`
}

// Validate validates this quota
func (m *Quota) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateQuotaType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var quotaTypeQuotaTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["USR","GRP","FILESET"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		quotaTypeQuotaTypePropEnum = append(quotaTypeQuotaTypePropEnum, v)
	}
}

const (

	// QuotaQuotaTypeUSR captures enum value "USR"
	QuotaQuotaTypeUSR string = "USR"

	// QuotaQuotaTypeGRP captures enum value "GRP"
	QuotaQuotaTypeGRP string = "GRP"

	// QuotaQuotaTypeFILESET captures enum value "FILESET"
	QuotaQuotaTypeFILESET string = "FILESET"
)

// prop value enum
func (m *Quota) validateQuotaTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, quotaTypeQuotaTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Quota) validateQuotaType(formats strfmt.Registry) error {

	if swag.IsZero(m.QuotaType) { // not required
		return nil
	}

	// value enum
	if err := m.validateQuotaTypeEnum("quotaType", "body", m.QuotaType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Quota) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Quota) UnmarshalBinary(b []byte) error {
	var res Quota
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
