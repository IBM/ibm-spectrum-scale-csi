// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProtocolState Summary information about a protocol state
//
// swagger:model ProtocolState
type ProtocolState struct {

	// Determines if the service is enabled or not
	// Enum: [yes no]
	Enabled string `json:"enabled,omitempty"`

	// The name of the service
	// Enum: [SMB OBJ NFS]
	Service string `json:"service,omitempty"`
}

// Validate validates this protocol state
func (m *ProtocolState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateService(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var protocolStateTypeEnabledPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["yes","no"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		protocolStateTypeEnabledPropEnum = append(protocolStateTypeEnabledPropEnum, v)
	}
}

const (

	// ProtocolStateEnabledYes captures enum value "yes"
	ProtocolStateEnabledYes string = "yes"

	// ProtocolStateEnabledNo captures enum value "no"
	ProtocolStateEnabledNo string = "no"
)

// prop value enum
func (m *ProtocolState) validateEnabledEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, protocolStateTypeEnabledPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ProtocolState) validateEnabled(formats strfmt.Registry) error {

	if swag.IsZero(m.Enabled) { // not required
		return nil
	}

	// value enum
	if err := m.validateEnabledEnum("enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

var protocolStateTypeServicePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SMB","OBJ","NFS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		protocolStateTypeServicePropEnum = append(protocolStateTypeServicePropEnum, v)
	}
}

const (

	// ProtocolStateServiceSMB captures enum value "SMB"
	ProtocolStateServiceSMB string = "SMB"

	// ProtocolStateServiceOBJ captures enum value "OBJ"
	ProtocolStateServiceOBJ string = "OBJ"

	// ProtocolStateServiceNFS captures enum value "NFS"
	ProtocolStateServiceNFS string = "NFS"
)

// prop value enum
func (m *ProtocolState) validateServiceEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, protocolStateTypeServicePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ProtocolState) validateService(formats strfmt.Registry) error {

	if swag.IsZero(m.Service) { // not required
		return nil
	}

	// value enum
	if err := m.validateServiceEnum("service", "body", m.Service); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProtocolState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProtocolState) UnmarshalBinary(b []byte) error {
	var res ProtocolState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
