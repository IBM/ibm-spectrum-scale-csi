// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AuthData auth data
//
// swagger:model AuthData
type AuthData struct {

	// auth data
	AuthData map[string]interface{} `json:"authData,omitempty"`

	// auth data type
	// Enum: [GUI USER]
	AuthDataType string `json:"authDataType,omitempty"`
}

// Validate validates this auth data
func (m *AuthData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthDataType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var authDataTypeAuthDataTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["GUI","USER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		authDataTypeAuthDataTypePropEnum = append(authDataTypeAuthDataTypePropEnum, v)
	}
}

const (

	// AuthDataAuthDataTypeGUI captures enum value "GUI"
	AuthDataAuthDataTypeGUI string = "GUI"

	// AuthDataAuthDataTypeUSER captures enum value "USER"
	AuthDataAuthDataTypeUSER string = "USER"
)

// prop value enum
func (m *AuthData) validateAuthDataTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, authDataTypeAuthDataTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AuthData) validateAuthDataType(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthDataType) { // not required
		return nil
	}

	// value enum
	if err := m.validateAuthDataTypeEnum("authDataType", "body", m.AuthDataType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AuthData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuthData) UnmarshalBinary(b []byte) error {
	var res AuthData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
