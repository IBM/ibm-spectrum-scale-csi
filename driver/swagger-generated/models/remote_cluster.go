// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RemoteCluster Summary information about a cluster that remotely mounts filesystems of a cluster that owns the filesytems
//
// swagger:model RemoteCluster
type RemoteCluster struct {

	// The ciphers of the public key of the remote cluster. Or one of DEFAULT, EMPTY or AUTHONLY.
	Ciphers []string `json:"ciphers"`

	// The SHA digest of the public key of the remote cluster.
	KeyDigest string `json:"keyDigest,omitempty"`

	// The names of filesystem of owning cluster and the access permissions to them.
	OwningClusterFilesystems []*OwningFilesystem `json:"owningClusterFilesystems"`

	// The cluster that remotely mounts the filesystems of the owning cluster
	RemoteCluster string `json:"remoteCluster,omitempty"`
}

// Validate validates this remote cluster
func (m *RemoteCluster) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOwningClusterFilesystems(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RemoteCluster) validateOwningClusterFilesystems(formats strfmt.Registry) error {

	if swag.IsZero(m.OwningClusterFilesystems) { // not required
		return nil
	}

	for i := 0; i < len(m.OwningClusterFilesystems); i++ {
		if swag.IsZero(m.OwningClusterFilesystems[i]) { // not required
			continue
		}

		if m.OwningClusterFilesystems[i] != nil {
			if err := m.OwningClusterFilesystems[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("owningClusterFilesystems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RemoteCluster) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RemoteCluster) UnmarshalBinary(b []byte) error {
	var res RemoteCluster
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
