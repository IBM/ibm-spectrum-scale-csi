// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RecoveryGroup Detailed information about a recovery group configuration
//
// swagger:model RecoveryGroup
type RecoveryGroup struct {

	// Capacity of the recovery group
	Capacity int64 `json:"capacity,omitempty"`

	// The nodeclass of the recovery group.
	ClassName string `json:"className,omitempty"`

	// Count of the declareted array
	DeclusteredArrayCount int32 `json:"declusteredArrayCount,omitempty"`

	// The free space of the recovery group
	FreeSpace int64 `json:"freeSpace,omitempty"`

	// Specifies if the recovery group was created with mmvdisk.
	MmvdiskControlled bool `json:"mmvdiskControlled,omitempty"`

	// The name of the recovery group
	Name string `json:"name,omitempty"`

	// The name of the recovery group servers.
	Nodes []string `json:"nodes"`

	// Count of the pdisks
	PdiskCount int32 `json:"pdiskCount,omitempty"`

	// The type of the recovery group.
	// Enum: [paired shared scale-out unknown]
	Type string `json:"type,omitempty"`

	// The used space of the recovery group
	UsedSpace int64 `json:"usedSpace,omitempty"`

	// Count of the vdisks
	VdiskCount int32 `json:"vdiskCount,omitempty"`
}

// Validate validates this recovery group
func (m *RecoveryGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var recoveryGroupTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["paired","shared","scale-out","unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		recoveryGroupTypeTypePropEnum = append(recoveryGroupTypeTypePropEnum, v)
	}
}

const (

	// RecoveryGroupTypePaired captures enum value "paired"
	RecoveryGroupTypePaired string = "paired"

	// RecoveryGroupTypeShared captures enum value "shared"
	RecoveryGroupTypeShared string = "shared"

	// RecoveryGroupTypeScaleOut captures enum value "scale-out"
	RecoveryGroupTypeScaleOut string = "scale-out"

	// RecoveryGroupTypeUnknown captures enum value "unknown"
	RecoveryGroupTypeUnknown string = "unknown"
)

// prop value enum
func (m *RecoveryGroup) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, recoveryGroupTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RecoveryGroup) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecoveryGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecoveryGroup) UnmarshalBinary(b []byte) error {
	var res RecoveryGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
