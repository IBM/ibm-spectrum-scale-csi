// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CapacityLiable4Licensing Capacity liable for licensing when a capcity based license model is applied
//
// swagger:model CapacityLiable4Licensing
type CapacityLiable4Licensing struct {

	// last update
	LastUpdate *FsccDate `json:"lastUpdate,omitempty"`

	// The total capacity in the cluster that is liable for licensing (in Bytes).
	LiableCapacity int64 `json:"liableCapacity,omitempty"`

	// The number of NSDs that are liable for licensing.
	LiableNsdCount int32 `json:"liableNsdCount,omitempty"`

	// The individual NSDs that are liable for licensing.
	LiableNsds []*NsdCapacity4Licensing `json:"liableNsds"`

	// unique ID
	UniqueID string `json:"uniqueID,omitempty"`
}

// Validate validates this capacity liable4 licensing
func (m *CapacityLiable4Licensing) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLastUpdate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLiableNsds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CapacityLiable4Licensing) validateLastUpdate(formats strfmt.Registry) error {

	if swag.IsZero(m.LastUpdate) { // not required
		return nil
	}

	if m.LastUpdate != nil {
		if err := m.LastUpdate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastUpdate")
			}
			return err
		}
	}

	return nil
}

func (m *CapacityLiable4Licensing) validateLiableNsds(formats strfmt.Registry) error {

	if swag.IsZero(m.LiableNsds) { // not required
		return nil
	}

	for i := 0; i < len(m.LiableNsds); i++ {
		if swag.IsZero(m.LiableNsds[i]) { // not required
			continue
		}

		if m.LiableNsds[i] != nil {
			if err := m.LiableNsds[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("liableNsds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CapacityLiable4Licensing) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CapacityLiable4Licensing) UnmarshalBinary(b []byte) error {
	var res CapacityLiable4Licensing
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
