// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// FilesystemMount filesystem mount
//
// swagger:model FilesystemMount
type FilesystemMount struct {

	// The mount options to pass to the mount command when mounting the file system
	AdditionalMountOptions string `json:"additionalMountOptions,omitempty"`

	//  Indicates when the file system is to be mounted: 'yes' when GPFS daemon starts, 'no' manually, 'automount' when fs is first accessed.
	AutomaticMountOption string `json:"automaticMountOption,omitempty"`

	// Drive letter when mounted on Windows nodes.
	DriveLetter string `json:"driveLetter,omitempty"`

	// Default mount point
	MountPoint string `json:"mountPoint,omitempty"`

	// Controls the order in which the individual file systems are mounted at daemon startup or when one of the all keywords is specified on the mmmount command.
	MountPriority int32 `json:"mountPriority,omitempty"`

	// Node(s) where the filesystem is mounted internally
	NodesMountedInternally []string `json:"nodesMountedInternally"`

	// Node(s) where the filesystem is mounted with read only mode
	NodesMountedReadOnly []string `json:"nodesMountedReadOnly"`

	// Node(s) where the filesystem is mounted with read-write mode
	NodesMountedReadWrite []string `json:"nodesMountedReadWrite"`

	// Read-only filesystem (in cross-cluster mount)
	ReadOnly bool `json:"readOnly,omitempty"`

	// Device name on the owning cluster of this cross-cluster mounted fs.
	RemoteDeviceName string `json:"remoteDeviceName,omitempty"`

	// Mount status for the GUI node
	Status string `json:"status,omitempty"`
}

// Validate validates this filesystem mount
func (m *FilesystemMount) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FilesystemMount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FilesystemMount) UnmarshalBinary(b []byte) error {
	var res FilesystemMount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
