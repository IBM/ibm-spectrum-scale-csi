// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NfsExport Summary information about a nfs export
//
// swagger:model NfsExport
type NfsExport struct {

	// This option specifies what delegate file operations to the accessing to the client.
	Delegations string `json:"delegations,omitempty"`

	// The name of the filesystem the export belongs to.
	// Required: true
	FilesystemName *string `json:"filesystemName"`

	// The list of the clients configurations for the the specified export.
	NfsClients []*NfsClient `json:"nfsClients"`

	// Specifies the path for the export.
	Path string `json:"path,omitempty"`

	// Specifies the path name the NFSv4 client uses to locate the directory in the server's file system tree.
	PseudoPath string `json:"pseudoPath,omitempty"`
}

// Validate validates this nfs export
func (m *NfsExport) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFilesystemName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNfsClients(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NfsExport) validateFilesystemName(formats strfmt.Registry) error {

	if err := validate.Required("filesystemName", "body", m.FilesystemName); err != nil {
		return err
	}

	return nil
}

func (m *NfsExport) validateNfsClients(formats strfmt.Registry) error {

	if swag.IsZero(m.NfsClients) { // not required
		return nil
	}

	for i := 0; i < len(m.NfsClients); i++ {
		if swag.IsZero(m.NfsClients[i]) { // not required
			continue
		}

		if m.NfsClients[i] != nil {
			if err := m.NfsClients[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nfsClients" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NfsExport) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NfsExport) UnmarshalBinary(b []byte) error {
	var res NfsExport
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
