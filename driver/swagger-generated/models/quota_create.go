// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// QuotaCreate Detailed information about a quota
//
// swagger:model QuotaCreate
type QuotaCreate struct {

	// Specifies the file-system grace period during which the files quota can exceed the soft limit before it is imposed as a hard limit. The period can be specified in days, hours, minutes, or seconds.
	BlockGracePeriod string `json:"blockGracePeriod,omitempty"`

	// Specifies the amount of data the fileset will be allowed to use during a grace period. If omitted, the default is no limit. unit defaults to 1K. it is optional to specify unit (K,M,G,T).
	BlockHardLimit string `json:"blockHardLimit,omitempty"`

	// Specifies the amount of data the fileset will be allowed to use. unit defaults to 1K. it is optional to specify unit (K,M,G,T).
	BlockSoftLimit string `json:"blockSoftLimit,omitempty"`

	// Specifies the file-system grace period during which the files quota can exceed the soft limit before it is imposed as a hard limit. The period can be specified in days, hours, minutes, or seconds.
	FilesGracePeriod string `json:"filesGracePeriod,omitempty"`

	// Specifies the number of files the fileset will be allowed to use during a grace period. If omitted, the default is no limit. unit defaults to 1. it is optional to specify unit (K,M,G).
	FilesHardLimit string `json:"filesHardLimit,omitempty"`

	// Specifies the number of files the fileset will be allowed to use. unit defaults to 1. it is optional to specify unit (K,M,G).
	FilesSoftLimit string `json:"filesSoftLimit,omitempty"`

	// user name, group name or fileset name
	ObjectName string `json:"objectName,omitempty"`

	// setQuota , setDefaultQuota or setGracePeriod. For set(Default)Quota specify at least one of the *Limit properties. For setGracePeriod specify the *Period properties.
	// Required: true
	OperationType *string `json:"operationType"`

	// The quota type
	// Enum: [USR GRP FILESET]
	QuotaType string `json:"quotaType,omitempty"`
}

// Validate validates this quota create
func (m *QuotaCreate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOperationType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuotaType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QuotaCreate) validateOperationType(formats strfmt.Registry) error {

	if err := validate.Required("operationType", "body", m.OperationType); err != nil {
		return err
	}

	return nil
}

var quotaCreateTypeQuotaTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["USR","GRP","FILESET"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		quotaCreateTypeQuotaTypePropEnum = append(quotaCreateTypeQuotaTypePropEnum, v)
	}
}

const (

	// QuotaCreateQuotaTypeUSR captures enum value "USR"
	QuotaCreateQuotaTypeUSR string = "USR"

	// QuotaCreateQuotaTypeGRP captures enum value "GRP"
	QuotaCreateQuotaTypeGRP string = "GRP"

	// QuotaCreateQuotaTypeFILESET captures enum value "FILESET"
	QuotaCreateQuotaTypeFILESET string = "FILESET"
)

// prop value enum
func (m *QuotaCreate) validateQuotaTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, quotaCreateTypeQuotaTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *QuotaCreate) validateQuotaType(formats strfmt.Registry) error {

	if swag.IsZero(m.QuotaType) { // not required
		return nil
	}

	// value enum
	if err := m.validateQuotaTypeEnum("quotaType", "body", m.QuotaType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *QuotaCreate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QuotaCreate) UnmarshalBinary(b []byte) error {
	var res QuotaCreate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
