// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Threshold Summary information about a threshold rule
//
// swagger:model Threshold
type Threshold struct {

	// A rule consists of a computation element which collects and performs a computation on the collected data. There are four computations defined: value, stats (max, min, median and percentile), zimonstatus and gpfsCapacityUtil. Currently supported only 'value'.
	Computation string `json:"computation,omitempty"`

	// The direction for the threshold limit.
	Direction string `json:"direction,omitempty"`

	// Length of collection time (in seconds).
	Duration int32 `json:"duration,omitempty"`

	// The threshold error limit, can be a percentage or an integer, depending on the metric on which the threshold value is being set.
	ErrorLevel float64 `json:"errorLevel,omitempty"`

	// Filters the result based on the filter key.
	FilterBy string `json:"filterBy,omitempty"`

	// The period (in seconds) specifying the time between executions of the rule.
	Frequency int32 `json:"frequency,omitempty"`

	// Groups the result based on the group key.
	GroupBy string `json:"groupBy,omitempty"`

	// The percentage that the observed value must be under (or over) the current threshold level to switch back to the previous state.
	Hysteresis float64 `json:"hysteresis,omitempty"`

	// The metric the threshold rule is defined on.
	Metric string `json:"metric,omitempty"`

	// The metric operation / aggregator used for this threshold rule (sum, avg, min, max, rate).
	MetricOp string `json:"metricOp,omitempty"`

	// rule name
	RuleName string `json:"ruleName,omitempty"`

	// The sample interval value in seconds.
	Sensitivity int32 `json:"sensitivity,omitempty"`

	// Used internally to map events to components (pool_data, pool_meta-data, fset_inode, thresholds).
	Tags string `json:"tags,omitempty"`

	// The type of the threshold, either metric or measurement.
	Type string `json:"type,omitempty"`

	// A user defined message that is included in the event message when the error threshold is triggered.
	UserActionError string `json:"userActionError,omitempty"`

	// A user defined message that is included in the event message when the warn threshold is triggered.
	UserActionWarn string `json:"userActionWarn,omitempty"`

	// The threshold warn limit, can be a percentage or an integer, depending on the metric on which the threshold value is being set.
	WarnLevel float64 `json:"warnLevel,omitempty"`
}

// Validate validates this threshold
func (m *Threshold) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Threshold) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Threshold) UnmarshalBinary(b []byte) error {
	var res Threshold
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
