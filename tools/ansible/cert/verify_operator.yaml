---
- name: Ensure common tasks are run
  include_tasks: common/dev-env.yaml

- name: Set deploy directory facts
  set_fact:
    OLM_DIR: "deploy/olm-catalog/{{OPERATOR_NAME}}/{{OPERATOR_VERSION}}/"
    OLM_MANIFEST: "deploy/olm-catalog/{{OPERATOR_NAME}}/"
    OLM_CSV: "{{OPERATOR_NAME}}.v{{OPERATOR_VERSION}}.clusterserviceversion.yaml"
    CSI_CRD: "deploy/crds/"

- name: Prep the CSV for operator-sdk generation
  shell: "python hacks/csv_prep.py --version {{OPERATOR_VERSION}}"
  args:
    chdir: "{{OPERATOR_DIR}}"

- name: Build operator ClusterServiceVersion with operator-sdk
  shell: "GO111MODULE=on operator-sdk olm-catalog gen-csv --operator-name {{OPERATOR_NAME}} --csv-version {{OPERATOR_VERSION}} --update-crds"
  args:
    chdir: "{{OPERATOR_DIR}}"

- name: Copy details from CRD into the ClusterServiceVersion
  shell: "python hacks/csv_copy_crd_descriptions.py --crd {{item}} --version {{OPERATOR_VERSION}}"
  args:
    chdir: "{{OPERATOR_DIR}}"
  loop: "{{CRD_LIST}}"

#- name: Copy the CR to the ClusterServiceVersion
#  shell: "python hacks/csv_copy_cr.py --cr {{item}} --version {{OPERATOR_VERSION}}"
#  args:
#    chdir: "{{OPERATOR_DIR}}"
#  loop: "{{CR_LIST}}"

#- name: Copy documentation for the ClusterServiceVersion
#  shell: "python hacks/csv_copy_docs.py --version {{OPERATOR_VERSION}}"
#  args:
#    chdir: "{{OPERATOR_DIR}}"

- name: "Find all of the files inside the olm dir"
  find:
    paths: "{{OLM_BASE}}"
    depth: 2
    recurse: yes
  register: repos

- name: "Bundling for operator hub"
  block:
    - name: "Set package name to {{OH_PKG}}"
      set_fact:
        package_name: "{{OH_PKG}}"
        flatten: false

    - name: "Set the active package name to match operatorhub"
      template:
        src:  "ibm-spectrum-scale-csi-operator.package.yaml.j2"
        dest: "{{OLM_BASE}}/ibm-spectrum-scale-csi-operator.package.yaml"


    - name: "Package the operator for operatorhub"
      include_tasks: "cert/package_operator.yaml"

- name: "Bundling for redhat certified"
  block:
    - name: "Set package name to {{CERT_PKG}}"
      set_fact:
        package_name: "{{CERT_PKG}}"
        flatten: true

    - name: "Set the  active package name to match redhat certified"
      template:
        src:  "ibm-spectrum-scale-csi-operator.package.yaml.j2"
        dest: "{{OLM_BASE}}/ibm-spectrum-scale-csi-operator.package.yaml"

    - name: "Replace {{QUAY_PATH}} with {{CERT_PATH}}"
      replace:
        path: "{{ item.path }}"
        regexp: '{{QUAY_PATH}}'
        replace: '{{CERT_PATH}}'
      with_items: "{{ repos.files }}"

    - name: "Package the operator for operatorhub"
      include_tasks: "cert/package_operator.yaml"

- name: "Reset olm"
  block:
    - name: "Set package name to {{OH_PKG}}"
      set_fact:
        package_name: "{{OH_PKG}}"

    - name: "Set the active package name to match operatorhub"
      template:
        src:  "ibm-spectrum-scale-csi-operator.package.yaml.j2"
        dest: "{{OLM_BASE}}/ibm-spectrum-scale-csi-operator.package.yaml"

    - name: "Replace {{CERT_PATH}} with {{QUAY_PATH}}"
      replace:
        path: "{{ item.path }}"
        regexp: '{{CERT_PATH}}'
        replace: '{{QUAY_PATH}}'
      with_items: "{{ repos.files }}"

- name: Run the 'operator-courier'
  shell: "operator-courier verify --ui_validate_io {{OP_PKG}}"
  register: ocOut
  args:
    chdir: "{{OPERATOR_DIR}}" 


- name: Create namespace
  shell: "kubectl create -f deploy/namespace.yaml"
  args:
    chdir: "{{OPERATOR_DIR}}"
  ignore_errors: yes


- name: Run 'operator-sdk' scorecard
  shell: "GO111MODULE=on operator-sdk scorecard {{SC_VARS}}"
  register: scOut
  args:
    chdir: "{{OPERATOR_DIR}}"

- debug: var=scOut.stdout_lines
- debug: var=scOut.stderr_lines

- name: Run 'molecule'
  shell: "molecule test"
  register: mOut
  args:
    chdir: "{{OPERATOR_DIR}}"
- debug: var=mOut.stdout_lines
- debug: var=mOut.stderr_lines
  


