apiVersion: apps/v1
kind: Deployment
metadata:
  name: ibm-spectrum-scale-csi-operator
  namespace: ibm-spectrum-scale-csi-driver
  labels:
    app.kubernetes.io/instance: ibm-spectrum-scale-csi-operator
    app.kubernetes.io/managed-by: ibm-spectrum-scale-csi-operator
    app.kubernetes.io/name: ibm-spectrum-scale-csi-operator
    product: ibm-spectrum-scale-csi
    release: ibm-spectrum-scale-csi-operator
  annotations:
    productVersion: 2.13.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: ibm-spectrum-scale-csi-operator
  template:
    metadata:
      labels:
        name: ibm-spectrum-scale-csi-operator
        app.kubernetes.io/instance: ibm-spectrum-scale-csi-operator
        app.kubernetes.io/managed-by: ibm-spectrum-scale-csi-operator
        app.kubernetes.io/name: ibm-spectrum-scale-csi-operator
        product: ibm-spectrum-scale-csi
        release: ibm-spectrum-scale-csi-operator
      annotations:
        productID: ibm-spectrum-scale-csi-operator
        productName: IBM Spectrum Scale CSI Operator
        productVersion: 2.13.0
    spec:
      serviceAccountName: ibm-spectrum-scale-csi-operator
      containers:
      - name: operator
        image: quay.io/ibm-spectrum-scale-dev/ibm-spectrum-scale-csi-operator@sha256:c292fa07a03f5accac554a5f366b7241c31dbb85fc4617c0fe2428cf103fce56
        args:
        - --leaderElection=true
        env:
        - name: METRICS_BIND_ADDRESS
          value: "8383"
        - name: WATCH_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: CSI_DRIVER_IMAGE
          value: quay.io/ibm-spectrum-scale-dev/ibm-spectrum-scale-csi-driver@sha256:6cf6a3818f48c2bcb5460c4902c5d44ad73c415a5f2980a374062a4bb18840ea
        - name: CSI_SNAPSHOTTER_IMAGE
          value: registry.k8s.io/sig-storage/csi-snapshotter@sha256:b3e90b33781670ac050c22c9e88b9e876493dca248966b9da6f7a90cc412ab86
        - name: CSI_ATTACHER_IMAGE
          value: registry.k8s.io/sig-storage/csi-attacher@sha256:b4d611100ece2f9bc980d1cb19c2285b8868da261e3b1ee8f45448ab5512ab94
        - name: CSI_PROVISIONER_IMAGE
          value: registry.k8s.io/sig-storage/csi-provisioner@sha256:7b9cdb5830d01bda96111b4f138dbddcc01eed2f95aa980a404c45a042d60a10
        - name: CSI_LIVENESSPROBE_IMAGE
          value: registry.k8s.io/sig-storage/livenessprobe@sha256:33692aed26aaf105b4d6e66280cceca9e0463f500c81b5d8c955428a75438f32
        - name: CSI_NODE_REGISTRAR_IMAGE
          value: registry.k8s.io/sig-storage/csi-node-driver-registrar@sha256:e01facb9fb9cffaf52d0053bdb979fbd8c505c8e411939a6e026dd061a6b4fbe
        - name: CSI_RESIZER_IMAGE
          value: registry.k8s.io/sig-storage/csi-resizer@sha256:be6a7de1d43dba90710b61bd3d0d8f568654a6adadaeea9188cf4cd3554cbb87
        resources:
          limits:
            cpu: 600m
            ephemeral-storage: 5Gi
            memory: 600Mi
          requests:
            cpu: 50m
            ephemeral-storage: 1Gi
            memory: 50Mi
        livenessProbe:
          exec:
            command:
            - ./health_check.sh
          initialDelaySeconds: 10
          periodSeconds: 30
        readinessProbe:
          exec:
            command:
            - ./health_check.sh
          initialDelaySeconds: 3
          periodSeconds: 1
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          readOnlyRootFilesystem: true
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - amd64
                - ppc64le
                - s390x
      tolerations:
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
        operator: Exists
      - effect: NoSchedule
        key: node-role.kubernetes.io/infra
        operator: Exists
      - effect: NoSchedule
        key: node-role.kubernetes.io/control-plane
        operator: Exists
      securityContext:
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: ibm-spectrum-scale-csi-operator
  creationTimestamp: null
rules:
- resources:
  - configmaps
  - endpoints
  - events
  - persistentvolumeclaims
  - pods
  - secrets
  - secrets/status
  - serviceaccounts
  - services
  - services/finalizers
  apiGroups:
  - ""
  verbs:
  - '*'
- resources:
  - daemonsets
  - deployments
  - replicasets
  - statefulsets
  apiGroups:
  - apps
  verbs:
  - create
  - delete
  - get
  - list
  - update
  - watch
- resources:
  - deployments/finalizers
  apiGroups:
  - apps
  resourceNames:
  - ibm-spectrum-scale-csi-operator
  verbs:
  - get
  - update
- resources:
  - clusterversions
  apiGroups:
  - config.openshift.io
  verbs:
  - get
  - list
  - watch
- resources:
  - leases
  apiGroups:
  - coordination.k8s.io
  verbs:
  - create
  - delete
  - get
  - list
  - update
  - watch
- resources:
  - '*'
  apiGroups:
  - csi.ibm.com
  verbs:
  - '*'
- resources:
  - servicemonitors
  apiGroups:
  - monitoring.coreos.com
  verbs:
  - create
  - get
- resources:
  - clusterrolebindings
  - clusterroles
  apiGroups:
  - rbac.authorization.k8s.io
  verbs:
  - '*'
- resources:
  - securitycontextconstraints
  apiGroups:
  - security.openshift.io
  verbs:
  - '*'
- resources:
  - csidrivers
  - storageclasses
  - volumeattachments
  apiGroups:
  - storage.k8s.io
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: ibm-spectrum-scale-csi-operator
  labels:
    app.kubernetes.io/instance: ibm-spectrum-scale-csi-operator
    app.kubernetes.io/managed-by: ibm-spectrum-scale-csi-operator
    app.kubernetes.io/name: ibm-spectrum-scale-csi-operator
    product: ibm-spectrum-scale-csi
    release: ibm-spectrum-scale-csi-operator
roleRef:
  name: ibm-spectrum-scale-csi-operator
  kind: ClusterRole
  apiGroup: rbac.authorization.k8s.io
subjects:
- name: ibm-spectrum-scale-csi-operator
  namespace: ibm-spectrum-scale-csi-driver
  kind: ServiceAccount
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ibm-spectrum-scale-csi-operator
  namespace: ibm-spectrum-scale-csi-driver
  labels:
    app.kubernetes.io/instance: ibm-spectrum-scale-csi-operator
    app.kubernetes.io/managed-by: ibm-spectrum-scale-csi-operator
    app.kubernetes.io/name: ibm-spectrum-scale-csi-operator
    product: ibm-spectrum-scale-csi
    release: ibm-spectrum-scale-csi-operator
imagePullSecrets:
- name: ibm-spectrum-scale-csi-registrykey
- name: ibm-entitlement-key
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: csiscaleoperators.csi.ibm.com
  annotations:
    controller-gen.kubebuilder.io/version: v0.4.1
  creationTimestamp: null
spec:
  group: csi.ibm.com
  names:
    kind: CSIScaleOperator
    categories:
    - scale
    listKind: CSIScaleOperatorList
    plural: csiscaleoperators
    shortNames:
    - cso
    singular: csiscaleoperator
  scope: Namespaced
  versions:
  - name: v1
    additionalPrinterColumns:
    - name: Version
      type: string
      description: CSIDriver version.
      jsonPath: .status.versions[0].version
    - name: Success
      type: string
      description: CSI driver resource creation status.
      jsonPath: .status.conditions[?(@ "status")].status
    schema:
      openAPIV3Schema:
        type: object
        description: CSIScaleOperator is the Schema for the csiscaleoperators API
        properties:
          apiVersion:
            type: string
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          kind:
            type: string
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          metadata:
            type: object
          spec:
            type: object
            description: CSIScaleOperatorSpec specifies the desired state of CSI
            properties:
              imagePullSecrets:
                type: array
                description: A passthrough option that distributes an imagePullSecrets array to the containers generated by the CSI scale operator. Please refer to official k8s documentation for your environment for more details.
                items:
                  type: string
              affinity:
                type: object
                description: affinity is a group of affinity scheduling rules.
                properties:
                  nodeAffinity:
                    type: object
                    description: Describes node affinity scheduling rules for the pod.
                    properties:
                      preferredDuringSchedulingIgnoredDuringExecution:
                        type: array
                        description: The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
                        items:
                          type: object
                          description: An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
                          properties:
                            preference:
                              type: object
                              description: A node selector term, associated with the corresponding weight.
                              properties:
                                matchExpressions:
                                  type: array
                                  description: A list of node selector requirements by node's labels.
                                  items:
                                    type: object
                                    description: A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                    properties:
                                      key:
                                        type: string
                                        description: The label key that the selector applies to.
                                      operator:
                                        type: string
                                        description: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                      values:
                                        type: array
                                        description: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
                                        items:
                                          type: string
                                    required:
                                    - key
                                    - operator
                                matchFields:
                                  type: array
                                  description: A list of node selector requirements by node's fields.
                                  items:
                                    type: object
                                    description: A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                    properties:
                                      key:
                                        type: string
                                        description: The label key that the selector applies to.
                                      operator:
                                        type: string
                                        description: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                      values:
                                        type: array
                                        description: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
                                        items:
                                          type: string
                                    required:
                                    - key
                                    - operator
                            weight:
                              type: integer
                              description: Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
                              format: int32
                          required:
                          - preference
                          - weight
                      requiredDuringSchedulingIgnoredDuringExecution:
                        type: object
                        description: If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
                        properties:
                          nodeSelectorTerms:
                            type: array
                            description: Required. A list of node selector terms. The terms are ORed.
                            items:
                              type: object
                              description: A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
                              properties:
                                matchExpressions:
                                  type: array
                                  description: A list of node selector requirements by node's labels.
                                  items:
                                    type: object
                                    description: A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                    properties:
                                      key:
                                        type: string
                                        description: The label key that the selector applies to.
                                      operator:
                                        type: string
                                        description: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                      values:
                                        type: array
                                        description: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
                                        items:
                                          type: string
                                    required:
                                    - key
                                    - operator
                                matchFields:
                                  type: array
                                  description: A list of node selector requirements by node's fields.
                                  items:
                                    type: object
                                    description: A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                    properties:
                                      key:
                                        type: string
                                        description: The label key that the selector applies to.
                                      operator:
                                        type: string
                                        description: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                      values:
                                        type: array
                                        description: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
                                        items:
                                          type: string
                                    required:
                                    - key
                                    - operator
                        required:
                        - nodeSelectorTerms
                  podAffinity:
                    type: object
                    description: Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
                    properties:
                      preferredDuringSchedulingIgnoredDuringExecution:
                        type: array
                        description: The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
                        items:
                          type: object
                          description: The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
                          properties:
                            podAffinityTerm:
                              type: object
                              description: Required. A pod affinity term, associated with the corresponding weight.
                              properties:
                                labelSelector:
                                  type: object
                                  description: A label query over a set of resources, in this case pods.
                                  properties:
                                    matchExpressions:
                                      type: array
                                      description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                      items:
                                        type: object
                                        description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                        properties:
                                          key:
                                            type: string
                                            description: key is the label key that the selector applies to.
                                          operator:
                                            type: string
                                            description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                          values:
                                            type: array
                                            description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                            items:
                                              type: string
                                        required:
                                        - key
                                        - operator
                                    matchLabels:
                                      type: object
                                      additionalProperties:
                                        type: string
                                      description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                namespaceSelector:
                                  type: object
                                  description: A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
                                  properties:
                                    matchExpressions:
                                      type: array
                                      description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                      items:
                                        type: object
                                        description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                        properties:
                                          key:
                                            type: string
                                            description: key is the label key that the selector applies to.
                                          operator:
                                            type: string
                                            description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                          values:
                                            type: array
                                            description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                            items:
                                              type: string
                                        required:
                                        - key
                                        - operator
                                    matchLabels:
                                      type: object
                                      additionalProperties:
                                        type: string
                                      description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                namespaces:
                                  type: array
                                  description: namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
                                  items:
                                    type: string
                                topologyKey:
                                  type: string
                                  description: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
                              required:
                              - topologyKey
                            weight:
                              type: integer
                              description: weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
                              format: int32
                          required:
                          - podAffinityTerm
                          - weight
                      requiredDuringSchedulingIgnoredDuringExecution:
                        type: array
                        description: If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
                        items:
                          type: object
                          description: Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
                          properties:
                            labelSelector:
                              type: object
                              description: A label query over a set of resources, in this case pods.
                              properties:
                                matchExpressions:
                                  type: array
                                  description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                  items:
                                    type: object
                                    description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                    properties:
                                      key:
                                        type: string
                                        description: key is the label key that the selector applies to.
                                      operator:
                                        type: string
                                        description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                      values:
                                        type: array
                                        description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                        items:
                                          type: string
                                    required:
                                    - key
                                    - operator
                                matchLabels:
                                  type: object
                                  additionalProperties:
                                    type: string
                                  description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                            namespaceSelector:
                              type: object
                              description: A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
                              properties:
                                matchExpressions:
                                  type: array
                                  description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                  items:
                                    type: object
                                    description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                    properties:
                                      key:
                                        type: string
                                        description: key is the label key that the selector applies to.
                                      operator:
                                        type: string
                                        description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                      values:
                                        type: array
                                        description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                        items:
                                          type: string
                                    required:
                                    - key
                                    - operator
                                matchLabels:
                                  type: object
                                  additionalProperties:
                                    type: string
                                  description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                            namespaces:
                              type: array
                              description: namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
                              items:
                                type: string
                            topologyKey:
                              type: string
                              description: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
                          required:
                          - topologyKey
                  podAntiAffinity:
                    type: object
                    description: Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
                    properties:
                      preferredDuringSchedulingIgnoredDuringExecution:
                        type: array
                        description: The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
                        items:
                          type: object
                          description: The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
                          properties:
                            podAffinityTerm:
                              type: object
                              description: Required. A pod affinity term, associated with the corresponding weight.
                              properties:
                                labelSelector:
                                  type: object
                                  description: A label query over a set of resources, in this case pods.
                                  properties:
                                    matchExpressions:
                                      type: array
                                      description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                      items:
                                        type: object
                                        description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                        properties:
                                          key:
                                            type: string
                                            description: key is the label key that the selector applies to.
                                          operator:
                                            type: string
                                            description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                          values:
                                            type: array
                                            description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                            items:
                                              type: string
                                        required:
                                        - key
                                        - operator
                                    matchLabels:
                                      type: object
                                      additionalProperties:
                                        type: string
                                      description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                namespaceSelector:
                                  type: object
                                  description: A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
                                  properties:
                                    matchExpressions:
                                      type: array
                                      description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                      items:
                                        type: object
                                        description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                        properties:
                                          key:
                                            type: string
                                            description: key is the label key that the selector applies to.
                                          operator:
                                            type: string
                                            description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                          values:
                                            type: array
                                            description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                            items:
                                              type: string
                                        required:
                                        - key
                                        - operator
                                    matchLabels:
                                      type: object
                                      additionalProperties:
                                        type: string
                                      description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                namespaces:
                                  type: array
                                  description: namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
                                  items:
                                    type: string
                                topologyKey:
                                  type: string
                                  description: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
                              required:
                              - topologyKey
                            weight:
                              type: integer
                              description: weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
                              format: int32
                          required:
                          - podAffinityTerm
                          - weight
                      requiredDuringSchedulingIgnoredDuringExecution:
                        type: array
                        description: If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
                        items:
                          type: object
                          description: Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
                          properties:
                            labelSelector:
                              type: object
                              description: A label query over a set of resources, in this case pods.
                              properties:
                                matchExpressions:
                                  type: array
                                  description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                  items:
                                    type: object
                                    description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                    properties:
                                      key:
                                        type: string
                                        description: key is the label key that the selector applies to.
                                      operator:
                                        type: string
                                        description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                      values:
                                        type: array
                                        description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                        items:
                                          type: string
                                    required:
                                    - key
                                    - operator
                                matchLabels:
                                  type: object
                                  additionalProperties:
                                    type: string
                                  description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                            namespaceSelector:
                              type: object
                              description: A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
                              properties:
                                matchExpressions:
                                  type: array
                                  description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                  items:
                                    type: object
                                    description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                    properties:
                                      key:
                                        type: string
                                        description: key is the label key that the selector applies to.
                                      operator:
                                        type: string
                                        description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                      values:
                                        type: array
                                        description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                        items:
                                          type: string
                                    required:
                                    - key
                                    - operator
                                matchLabels:
                                  type: object
                                  additionalProperties:
                                    type: string
                                  description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                            namespaces:
                              type: array
                              description: namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
                              items:
                                type: string
                            topologyKey:
                              type: string
                              description: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
                          required:
                          - topologyKey
              tolerations:
                type: array
                description: Array of tolerations that will be distributed to CSI pods. Please refer to official k8s documentation for your environment for more details.
                items:
                  type: object
                  description: The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
                  properties:
                    value:
                      type: string
                      description: Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
                    effect:
                      type: string
                      description: Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
                    key:
                      type: string
                      description: Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
                    operator:
                      type: string
                      description: Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
                    tolerationSeconds:
                      type: integer
                      description: TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
                      format: int64
              attacher:
                type: string
                description: attacher is the attacher sidecar image for CSI (actually attaches to the storage).
              attacherNodeSelector:
                type: array
                default:
                - value: "true"
                  key: scale
                description: attacherNodeSelector is the node selector for attacher sidecar.
                items:
                  type: object
                  description: CSINodeSelector defines the fields of Node Selector
                  properties:
                    value:
                      type: string
                      description: Value for key
                    key:
                      type: string
                      description: Key for node selector
                  required:
                  - key
                  - value
              clusters:
                type: array
                description: clusters is a collection of IBM Storage Scale cluster properties for the CSI driver to mount.
                items:
                  type: object
                  description: Defines the fields of a IBM Storage Scale cluster specification
                  properties:
                    cacert:
                      type: string
                      description: cacert is the name of the configMap storing GUI certificates. Mandatory if secureSslMode is true.
                    id:
                      type: string
                      description: id is the cluster ID of the IBM Storage Scale cluster.
                      maxLength: 20
                    primary:
                      type: object
                      description: primary is the primary file system for the IBM Storage Scale cluster.
                      properties:
                        inodeLimit:
                          type: string
                          description: Inode limit for Primary Fileset
                        primaryFs:
                          type: string
                          description: The name of the primary CSIFilesystem
                        primaryFset:
                          type: string
                          description: The name of the primary fileset, created in primaryFs
                        remoteCluster:
                          type: string
                          description: Remote IBM Storage Scale cluster ID
                    restApi:
                      type: array
                      description: restApi is a collection of targets for REST calls
                      items:
                        type: object
                        description: Defines the fields for REST API server information.
                        properties:
                          guiHost:
                            type: string
                            description: guiHost is the hostname/IP of the IBM Storage Scale GUI node.
                          guiPort:
                            type: integer
                            description: guiPort is the port number of the IBM Storage Scale GUI node.
                        required:
                        - guiHost
                    secrets:
                      type: string
                      description: secret is the name of the basic-auth secret containing credentials to connect to IBM Storage Scale REST API server.
                    secureSslMode:
                      type: boolean
                      default: false
                      description: secureSslMode specifies if a secure SSL connection to connect to IBM Storage Scale cluster is required.
                      enum:
                      - true
                      - false
                  required:
                  - id
                  - restApi
                  - secrets
                  - secureSslMode
              consistencyGroupPrefix:
                type: string
                description: consistencyGroupPrefix is a prefix of consistency group of an application. This is expected to be an RFC4122 UUID value (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx in hexadecimal values)
              csipspname:
                type: string
                description: PodSecurityPolicy name for CSI driver and sidecar pods.
              driverRegistrar:
                type: string
                description: driverRegistrar is the Sidecar container image for the IBM Storage Scale CSI plugin pods.
              kubeletRootDirPath:
                type: string
                description: kubeletRootDirPath is the path for kubelet root directory.
              livenessprobe:
                type: string
                description: livenessprobe is the image for livenessProbe container (liveness probe is used to know when to restart a container).
              nodeMapping:
                type: array
                description: nodeMapping specifies mapping of K8s node with IBM Storage Scale node.
                items:
                  type: object
                  description: Defines mapping between kubernetes node and IBM Storage Scale nodes
                  properties:
                    k8sNode:
                      type: string
                      description: k8sNode is the name of the kubernetes node
                    spectrumscaleNode:
                      type: string
                      description: spectrumscaleNode is the name of the IBM Storage Scale node
                  required:
                  - k8sNode
                  - spectrumscaleNode
              pluginNodeSelector:
                type: array
                default:
                - value: "true"
                  key: scale
                description: pluginNodeSelector is the node selector for IBM Storage Scale CSI plugin.
                items:
                  type: object
                  description: CSINodeSelector defines the fields of Node Selector
                  properties:
                    value:
                      type: string
                      description: Value for key
                    key:
                      type: string
                      description: Key for node selector
                  required:
                  - key
                  - value
              provisioner:
                type: string
                description: provisioner is the provisioner sidecar image for CSI (actually issues provision requests).
              provisionerNodeSelector:
                type: array
                default:
                - value: "true"
                  key: scale
                description: provisionerNodeSelector is the node selector for provisioner sidecar.
                items:
                  type: object
                  description: CSINodeSelector defines the fields of Node Selector
                  properties:
                    value:
                      type: string
                      description: Value for key
                    key:
                      type: string
                      description: Key for node selector
                  required:
                  - key
                  - value
              resizer:
                type: string
                description: resizer is the resizer sidecar image for CSI (issues volume expansion requests).
              resizerNodeSelector:
                type: array
                default:
                - value: "true"
                  key: scale
                description: resizerNodeSelector is the node selector for resizer sidecar.
                items:
                  type: object
                  description: CSINodeSelector defines the fields of Node Selector
                  properties:
                    value:
                      type: string
                      description: Value for key
                    key:
                      type: string
                      description: Key for node selector
                  required:
                  - key
                  - value
              snapshotter:
                type: string
                description: snapshotter is the snapshotter sidecar image for CSI (issues volume snapshot requests).
              snapshotterNodeSelector:
                type: array
                default:
                - value: "true"
                  key: scale
                description: snapshotterNodeSelector is the snapshotter node selector for snapshotter sidecar.
                items:
                  type: object
                  description: CSINodeSelector defines the fields of Node Selector
                  properties:
                    value:
                      type: string
                      description: Value for key
                    key:
                      type: string
                      description: Key for node selector
                  required:
                  - key
                  - value
              spectrumScale:
                type: string
                description: spectrumScale is the image name for the IBM Storage Scale CSI node driver plugin container.
            required:
            - clusters
          status:
            type: object
            description: CSIScaleOperatorStatus defines the observed state of CSIScaleOperator
            properties:
              conditions:
                type: array
                description: conditions contains the details for one aspect of the current state of this custom resource.
                items:
                  type: object
                  description: "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n \ttype FooStatus struct{ \t    // Represents the observations of a foo's current state. \t    // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" \t    // +patchMergeKey=type \t    // +patchStrategy=merge \t    // +listType=map \t    // +listMapKey=type \t    Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n \t    // other fields \t}"
                  properties:
                    type:
                      type: string
                      description: type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                    status:
                      type: string
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                    lastTransitionTime:
                      type: string
                      description: lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                    message:
                      type: string
                      description: message is a human readable message indicating details about the transition. This may be an empty string.
                      maxLength: 32768
                    observedGeneration:
                      type: integer
                      description: observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                    reason:
                      type: string
                      description: reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
              versions:
                type: array
                description: version is the current CSIDriver version installed by the operator.
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      description: name is the name of the particular operand this version is for.
                    version:
                      type: string
                      description: version of a particular operand that is currently being managed.
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: security.openshift.io/v1
kind: SecurityContextConstraints
metadata:
  name: spectrum-scale-csiaccess
  namespace: ibm-spectrum-scale-csi-driver
  annotations:
    kubernetes.io/description: allows hostpath and host network to be accessible
volumes:
- configMap
- downwardAPI
- emptyDir
- hostPath
- persistentVolumeClaim
- projected
- secret
allowHostDirVolumePlugin: true
allowHostIPC: false
allowHostNetwork: true
allowHostPID: false
allowHostPorts: false
allowPrivilegeEscalation: true
allowPrivilegedContainer: true
allowedCapabilities: []
defaultAddCapabilities: []
fsGroup:
  type: MustRunAs
groups: []
readOnlyRootFilesystem: false
requiredDropCapabilities:
- KILL
- MKNOD
- SETUID
- SETGID
runAsUser:
  type: RunAsAny
seLinuxContext:
  type: RunAsAny
supplementalGroups:
  type: RunAsAny
users:
- system:serviceaccount:ibm-spectrum-scale-csi-driver:ibm-spectrum-scale-csi-attacher
- system:serviceaccount:ibm-spectrum-scale-csi-driver:ibm-spectrum-scale-csi-provisioner
- system:serviceaccount:ibm-spectrum-scale-csi-driver:ibm-spectrum-scale-csi-node
- system:serviceaccount:ibm-spectrum-scale-csi-driver:ibm-spectrum-scale-csi-snapshotter
- system:serviceaccount:ibm-spectrum-scale-csi-driver:ibm-spectrum-scale-csi-resizer
