---
- name: Build Operator in Kubernetes docker container
  hosts: k8s
  vars:
    image_name: csi.ibm.com/ibm-spectrum-scale-csi-operator:testing
  tasks:
    # using command so we don't need to install any dependencies
    - name: Get existing image hash
      command: docker images -q {{ image_name }}
      register: prev_hash
      changed_when: false

    - name: Check if CI
      set_fact:
        CI: lookup('env', 'CI')

    - name: Build Operator Image
      command: docker build -f /build/build/Dockerfile -t {{ image_name }} /build
      register: build_cmd
      changed_when: not prev_hash.stdout or (prev_hash.stdout and prev_hash.stdout not in ''.join(build_cmd.stdout_lines[-2:]))


- name: Converge
  hosts: localhost
  connection: local
  vars:
    ansible_python_interpreter: '{{ ansible_playbook_python }}'
    deploy_dir: "{{ lookup('env', 'MOLECULE_PROJECT_DIRECTORY') }}/deploy"
    pull_policy: Never
    REPLACE_IMAGE: csi.ibm.com/ibm-spectrum-scale-csi-operator:testing
    custom_resource: "{{ lookup('file', '/'.join([deploy_dir, 'crds/csiscaleoperators.csi.ibm.com_cr.yaml'])) | from_yaml }}"
  tasks:
    - name: Testing Block
      block:
        - name: Delete the Operator Deployment
          k8s:
            state: absent
            namespace: '{{ namespace }}'
            definition: "{{ lookup('template', '/'.join([deploy_dir, 'operator.yaml'])) }}"
          register: delete_deployment
          when: hostvars[groups.k8s.0].build_cmd.changed

        - name: Wait 30s for Operator Deployment to terminate
          k8s_info:
            api_version: '{{ definition.apiVersion }}'
            kind: '{{ definition.kind }}'
            namespace: '{{ namespace }}'
            name: '{{ definition.metadata.name }}'
          vars:
            definition: "{{ lookup('template', '/'.join([deploy_dir, 'operator.yaml'])) | from_yaml }}"
          register: deployment
          until: not deployment.resources
          delay: 3
          retries: 10
          when: delete_deployment.changed

        - name: Create the Operator Deployment
          k8s:
            namespace: '{{ namespace }}'
            definition: "{{ lookup('template', '/'.join([deploy_dir, 'operator.yaml'])) }}"

        - name: Create the operator secret
          k8s:
            state: present
            definition:
              apiVersion: "v1"
              kind: "Secret"
              metadata:
                name: "{{ secret_name }}"
                namespace: "{{ namespace }}"
              data:
                password: "{{ secret_pass }}"
                username: "{{ secret_user }}"
              type: "Opaque"
              labels:
                app.kubernetes.io/name: ibm-spectrum-scale-csi-operator
          vars:
            secret_pass: "cGFzc3dvcMq="  # "password"
            secret_user: "dXNlcm5hbwu="  # "username"
            secret_name: "secret1"

        - name: Create the csi.ibm.com/v1.CSIScaleOperator
          k8s:
            state: present
            namespace: '{{ namespace }}'
            definition: '{{ custom_resource }}'
            validate:
              strict: yes
              fail_on_error: yes

        - name: Wait 240s for reconciliation to run
          k8s_info:
            api_version: '{{ custom_resource.apiVersion }}'
            kind: '{{ custom_resource.kind }}'
            namespace: '{{ namespace }}'
            name: '{{ custom_resource.metadata.name }}'
          register: cr
          until:
            - "'Successful' in (cr | json_query('resources[].status.conditions[].reason'))"
          delay: 6
          retries: 40
      rescue:
        - name: debug cr
          ignore_errors: yes
          failed_when: false
          debug:
            var: debug_cr
          vars:
            debug_cr: '{{ lookup("k8s",
              kind=custom_resource.kind,
              api_version=custom_resource.apiVersion,
              namespace=namespace,
              resource_name=custom_resource.metadata.name
            )}}'

        - name: Get Operator Pod
          set_fact:
            op_pod: '{{ lookup("k8s",
              kind="pods",
              namespace=namespace,
              label_selector="app.kubernetes.io/name=ibm-spectrum-scale-csi-operator"
            )}}'

        - name: Get Pods
          set_fact:
            pods: '{{ lookup("k8s",
              kind="pods",
              namespace=namespace

            )}}'

        - name: debug pods lookup
          ignore_errors: yes
          failed_when: false
          debug:
            var: pods


        - name: Get operator ansible logs
          ignore_errors: yes
          failed_when: false
          command: "kubectl logs {{ op_pod.metadata.name }} -n {{ namespace }} ansible"
          environment:
            KUBECONFIG: '{{ lookup("env", "KUBECONFIG") }}'
          register: ansible_log

        - debug: var=ansible_log.stdout_lines

        - name: Get operator ansible logs
          ignore_errors: yes
          failed_when: false
          command: "kubectl logs {{ op_pod.metadata.name }} -n {{ namespace }} operator"
          environment:
            KUBECONFIG: '{{ lookup("env", "KUBECONFIG") }}'
          register: oper_log

        - debug: var=oper_log.stdout_lines

        - name: debug api_groups
          ignore_errors: yes
          failed_when: false
          debug:
            var: debug_api_groups
          vars:
            debug_api_groups: "{{ lookup('k8s', cluster_info='api_groups') }}"

        - debug:
            msg: "kubectl logs {{ op_pod.metadata.name }} -n {{ namespace }} ansible"

        - fail:
            msg: "Failed on action: converge"

    - include_tasks: '{{ playbook_dir }}/../default/tests/basic_tests.yaml'

- import_playbook: '{{ playbook_dir }}/../default/asserts.yml'
