/*
Copyright 2021.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1

import (
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// CSIScaleOperatorSpec specifies the desired state of CSI
type CSIScaleOperatorSpec struct {

	// Note: Sidecar images are currently fetched by spec.attacher, spec.provisioner, spec.resizer, spec.snapshotter separately.
	// sidecars is a list of sidecar images.
	// // +listType=set
	// // +kubebuilder:validation:Optional
	// Sidecars []CSISidecar `json:"sidecars"`

	// attacher is the attacher sidecar image for CSI (actually attaches to the storage).
	Attacher string `json:"attacher,omitempty"`

	// attacherNodeSelector is the node selector for attacher sidecar.
	AttacherNodeSelector []CSINodeSelector `json:"attacherNodeSelector,omitempty"`

	// clusters is a collection of GPFS CSICluster properties for the CSI driver to mount.
	Clusters []CSICluster `json:"clusters"`

	// driverRegistrar is the Sidecar container image for the CSI spectrum scale plugin pods.
	DriverRegistrar string `json:"driverRegistrar,omitempty"`

	// nodeMapping specifies mapping of K8s node with spectrum scale node.
	NodeMapping []NodeMapping `json:"nodeMapping,omitempty"`

	// pluginNodeSelector is the node selector for spectrum scale CSI plugin.
	PluginNodeSelector []CSINodeSelector `json:"pluginNodeSelector,omitempty"`

	// provisioner is the provisioner sidecar image for CSI (actually issues provision requests).
	Provisioner string `json:"provisioner,omitempty"`

	// provisionerNodeSelector is the node selector for provisioner sidecar.
	ProvisionerNodeSelector []CSINodeSelector `json:"provisionerNodeSelector,omitempty"`

	// snapshotter is the snapshotter sidecar image for CSI (issues volume snapshot requests).
	Snapshotter string `json:"snapshotter,omitempty"`

	// snapshotterNodeSelector is the snapshotter node selector for snapshotter sidecar.
	SnapshotterNodeSelector []CSINodeSelector `json:"snapshotterNodeSelector,omitempty"`

	// resizer is the resizer sidecar image for CSI (issues volume expansion requests).
	Resizer string `json:"resizer,omitempty"`

	// resizerNodeSelector is the node selector for resizer sidecar.
	ResizerNodeSelector []CSINodeSelector `json:"resizerNodeSelector,omitempty"`

	// livenessprobe is the image for livenessProbe container (liveness probe is used to know when to restart a container).
	LivenessProbe string `json:"livenessprobe,omitempty"`

	// spectrumScale is the image name for the CSI spectrum scale node driver plugin container.
	SpectrumScale string `json:"spectrumScale,omitempty"`

	// A passthrough option that distributes an imagePullSecrets array to the
	// containers generated by the CSI scale operator. Please refer to official
	// k8s documentation for your environment for more details.
	ImagePullSecrets []string `json:"imagePullSecrets,omitempty"`

	// Array of tolerations that will be distributed to CSI pods. Please refer to
	// official k8s documentation for your environment for more details.
	Tolerations []corev1.Toleration `json:"tolerations,omitempty"`

	// ControllerRepository string `json:"repository,omitempty"`

	// ControllerTag string `json:"tag,omitempty"`

	//	NodeRepository string `json:"repository"`
	//	NodeTag        string `json:"tag"`

	// node is a group of CSIScaleOperatorNodeSpec properties.
	// Node CSIScaleOperatorNodeSpec `json:"node,omitempty"`

	// affinity is a group of affinity scheduling rules.
	Affinity *corev1.Affinity `json:"affinity,omitempty"`

	// status defines the observed state of CSIScaleOperator
	// Status CSIScaleOperatorStatus `json:"status,omitempty"`

	// +kubebuilder:default:=/var/lib/kubelet
	// kubeletRootDirPath is the path for kubelet root directory.
	KubeletRootDirPath string `json:"kubeletRootDirPath,omitempty"`

	// PodSecurityPolicy name for CSI driver and sidecar pods
	CSIpspname string `json:"csipspname,omitempty"`
}

// CSIScaleOperatorStatus defines the observed state of CSIScaleOperator
type CSIScaleOperatorStatus struct {

	/* TODO: Status should display driver state.
	// Phase is the driver running phase
	Phase           DriverPhase `json:"phase,omitempty"`
	ControllerReady bool        `json:"controllerReady,omitempty"`
	NodeReady       bool        `json:"nodeReady,omitempty"`
	Conditions []CSICondition `json:"conditions,omitempty"`
	*/

	// version is the current CSIDriver version installed by the operator.
	Version    string             `json:"version,omitempty"`

	// conditions contains the details for one aspect of the current state of this custom resource.
	Conditions []metav1.Condition `json:"conditions,omitempty"`
}

/*
TODO: Unused code. Remove if not required.
// CSIScaleOperatorNodeSpec defines the desired state of CSIScaleOperatorNode
// +k8s:openapi-gen=true
type CSIScaleOperatorNodeSpec struct {
	Repository string `json:"repository"`
	Tag        string `json:"tag"`

	ImagePullPolicy corev1.PullPolicy `json:"imagePullPolicy,omitempty"`

	Affinity *corev1.Affinity `json:"affinity,omitempty"`

	// // +listType=set

	Tolerations []corev1.Toleration `json:"tolerations,omitempty"`
}
*/

/* Note: Uncomment when status.Phase is in use.
type DriverPhase string

const (
	DriverPhaseNone     DriverPhase = ""
	DriverPhaseCreating DriverPhase = "Creating"
	DriverPhaseRunning  DriverPhase = "Running"
	DriverPhaseFailed   DriverPhase = "Failed"
)
*/

/*
// Note: Uncomment this when spec.sidecars field is in use.
type CSISidecar struct {
	// The name of the CSI sidecar image
	Name string `json:"name"`

	// The repository of the CSI sidecar image
	Repository string `json:"repository"`

	// The tag of the CSI sidecar image
	Tag string `json:"tag"`

	// The pullPolicy of the CSI sidecar image
	// +kubebuilder:default:=IfNotPresent
	// +optional
	ImagePullPolicy corev1.PullPolicy `json:"imagePullPolicy"`
}
*/

type CSICondition struct {
	// +optional
	// Indicates that the plugin is running
	Ready bool `json:"Ready"`
}

type CSINodeSelector struct {

	// Key for node selector
	Key string `json:"key"`

	// Value for key
	Value string `json:"value"`
}

type Toleration struct {

	// +optional

	// Node taint key name
	Key string `json:"key"`

	// +optional

	// Valid values are "Exists" and "Equal"
	Operator Operator `json:"operator"`

	// +optional

	// Required if operator is "Equal"
	Value string `json:"value"`

	// +optional

	// Valid values are "NoSchedule", "PreferNoSchedule" and "NoExecute".
	// An empty effect matches all effects with given key.
	Effect string `json:"effect"`
}

// +kubebuilder:validation:Enum=NoSchedule;PreferNoSchedule;NoExecute
type Effect string

const (

	// TODO: add doc
	NoSchedule Effect = "NoSchedule"

	// TODO: add doc
	PreferNoSchedule Effect = "PreferNoSchedule"

	// TODO: add doc
	NoExecute Effect = "NoExecute"

	// TODO: add doc
	None Effect = ""
)

// +kubebuilder:validation:Enum=Exists;Equal
type Operator string

const (

	// TODO: add doc
	Exists Operator = "Exists"

	// TODO: add doc
	Equal Operator = "Equal"
)

type NodeMapping struct {

	// k8sNode is the name of the kubernetes node
	K8sNode string `json:"k8sNode"`

	// spectrumscaleNode is the name of the SpectrumScale node
	SpectrumscaleNode string `json:"spectrumscaleNode"`
}

type CSICluster struct {

	// cacert is the name of the configMap storing GUI certificates. Mandatory if secureSslMode is true.
	Cacert string `json:"cacert,omitempty"` // TODO: Rename to CACert or caCert

	// id is the CSICluster id of the GPFS CSICluster specified.
	// +kubebuilder:validation:MaxLength:=20
	Id string `json:"id"` // TODO: Rename to ID or id

	// +optional
	// primary is the primary file system for the GPFS CSICluster
	Primary CSIFilesystem `json:"primary"`

	// restApi is a collection of targets for REST calls
	RestApi []RestApi `json:"restApi"` // TODO: Rename to RESTApi or restApi

	// secret is the name of the basic-auth secret containing credentials to connect to IBM Spectrum Scale REST API server.
	Secrets string `json:"secrets"` // TODO: Secrets should be Singular

	// secureSslMode specifies if a secure SSL connection to connect to GPFS is required.
	// +kubebuilder:default:=false
	// +kubebuilder:validation:Enum:=true;false
	SecureSslMode bool `json:"secureSslMode"`
}

type CSIFilesystem struct {

	// +optional
	// +kubebuilder:default:="1M"
	// Inode limit for Primary Fileset
	InodeLimit string `json:"inodeLimit"`

	// The name of the primary CSIFilesystem
	PrimaryFs string `json:"primaryFs"`

	// +optional
	// +kubebuilder:default:=spectrum-scale-csi-volume-store
	// The name of the primary fileset, created in primaryFs
	PrimaryFset string `json:"primaryFset"`

	// Remote CSICluster ID
	RemoteCluster string `json:"remoteCluster,omitempty"`
}

type RestApi struct {

	// The hostname of the REST server
	GuiHost string `json:"guiHost"`

	// The port number running the REST server
	// +kubebuilder:default:=443
	GuiPort int `json:"guiPort,omitempty"`
}

// // +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`,description="TODO: Add description."

// +kubebuilder:printcolumn:name="Version",type=string,JSONPath=`.status.version`,description="CSIDriver version."
// +kubebuilder:object:root=true
// +kubebuilder:printcolumn:name="Success",type=string,JSONPath=`.status.conditions[?(@ "status")].status`,description="CSI driver resource creation status."
// +kubebuilder:subresource:status
// +kubebuilder:resource:shortName=csi, categories=scale, scope=Namespaced

// CSIScaleOperator is the Schema for the csiscaleoperators API
type CSIScaleOperator struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   CSIScaleOperatorSpec   `json:"spec,omitempty"`
	Status CSIScaleOperatorStatus `json:"status,omitempty"`
}

//+kubebuilder:object:root=true

// CSIScaleOperatorList contains a list of CSIScaleOperator
type CSIScaleOperatorList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CSIScaleOperator `json:"items"`
}

func init() {
	SchemeBuilder.Register(&CSIScaleOperator{}, &CSIScaleOperatorList{})
}

type CSIReason string

const (
	CSIConfigured       CSIReason = "Successful"
	CSINotConfigured    CSIReason = "CSIError"
	ResourceSyncError   CSIReason = "SyncError"
	ResourceCreateError CSIReason = "CreateError"
	ResourceReadError   CSIReason = "ReadError"
	ResourceUpdateError CSIReason = "UpdateError"
	Unknown             CSIReason = "Unknown"
)
