services: docker
dist: focal
language: go
go:
  - 1.23.x

env:
  global:
# Shared ENV
    - REPO_OWNER=$(dirname $TRAVIS_REPO_SLUG)
    # REPO_NAME should normally be 'ibm-spectrum-scale-csi'
    - REPO_NAME=$(basename $TRAVIS_REPO_SLUG)
    - REPO_NAME_DRIVER="ibm-spectrum-scale-csi-driver"
    - REPO_NAME_OPERATOR="ibm-spectrum-scale-csi-operator"

    # Grab quay username from 'user+bot_token'
    - IMAGE_REPO_OWNER=${QUAY_BOT_USERNAME%%\+*}
    # Format quay image target
    - IMAGE_REPO_DRIVER=quay.io/${IMAGE_REPO_OWNER}/${REPO_NAME_DRIVER}
    - IMAGE_REPO_OPERATOR=quay.io/${IMAGE_REPO_OWNER}/${REPO_NAME_OPERATOR}

    # Add image tag
    - IMAGE_TAG=$(
        if [[ $TRAVIS_EVENT_TYPE == 'cron' ]];
        then
            echo "nightly-${TRAVIS_BUILD_ID}-`date -u +%F`";
        else
            echo $TRAVIS_BRANCH;
        fi
      )
    # Add image repo and tag
    - IMAGE_FQN_DRIVER=${IMAGE_REPO_DRIVER}:${IMAGE_TAG}
    - IMAGE_FQN_OPERATOR=${IMAGE_REPO_OPERATOR}:${IMAGE_TAG}
    - IMAGE_VERSION=${IMAGE_TAG}
    # Add image label to expire nightlies
    - COMMIT=$(git log -1 --format=%H)
    - IMAGE_LABEL=$(
        if [[ $TRAVIS_EVENT_TYPE == 'cron' ]];
        then
            echo "--label version=${IMAGE_VERSION} --label quay.expires-after=2w";
        else
            echo "--label version=${IMAGE_VERSION}";
        fi
      )
    - BUILD_DIR_OPERATOR="${TRAVIS_BUILD_DIR}/operator"
    - BUILD_DIR_DRIVER="${TRAVIS_BUILD_DIR}/driver"
    - BUILD_PLATFORMS="linux/ppc64le,linux/s390x,linux/amd64,linux/arm64"

    # For the quay app
    - BRANCH=$(if [ "$TRAVIS_PULL_REQUEST" == "false" ]; then echo $TRAVIS_BRANCH; else echo $TRAVIS_PULL_REQUEST_BRANCH; fi)
    #- OPERATOR_DIR=deploy/olm-catalog/ibm-spectrum-scale-csi-operator
    - QUAY_NAMESPACE=${IMAGE_REPO_OWNER}
    - PACKAGE_NAME=${REPO_NAME}-${BRANCH}

    # Build tool versions
    - KUSTOMIZE_VERSION=4.5.2
    - GOLANGCI_LINT_VERSION=v1.59.0

# Operator ENV
    - OCTOKIT_API_ENDPOINT="https://github.ibm.com/api/v3/"
    - PATH=/opt/python/3.6.7/bin:$PATH
    - GO111MODULE=on
    - KUBE_VERSION="v1.20.4"
    - OP_VER="v1.13.0"
    - OPERATOR_LOCAL_IMAGE="csi.ibm.com/${REPO_NAME_OPERATOR}:testing"
    - OPERATOR_SDK="https://github.com/operator-framework/operator-sdk/releases/download/${OP_VER}/operator-sdk_linux_amd64"
    #- OLM_MANIFEST="${BUILD_DIR_OPERATOR}/config/olm-catalog/${REPO_NAME_OPERATOR}/"
    - CHANGE_MINIKUBE_NONE_USER=true
    - MINIKUBE_WANTUPDATENOTIFICATION=false
    - MINIKUBE_WANTREPORTERRORPROMPT=false
    - MINIKUBE_HOME=$HOME
    - KUBECONFIG=$HOME/.kube/config

docker: &docker_buildx
  before_install:
    - mkdir -vp ~/.docker/cli-plugins/
    - curl --silent -L "https://github.com/docker/buildx/releases/download/v0.4.2/buildx-v0.4.2.linux-amd64" > ~/.docker/cli-plugins/docker-buildx
    - chmod a+x ~/.docker/cli-plugins/docker-buildx
    - sudo rm -f /etc/docker/daemon.json
    - sudo service docker restart
    - docker buildx create --use

addons:
  apt:
    packages:
      - "python3"
      - "python3-dev"
      - "python3-pip"
      - "conntrack"
stages:
  - lint
  - build
  - test
jobs:
  fast_finish: true

  include:
    # Install operator-courier and run the lint on the manifest.
    - stage: lint
      name: "Lint - Driver: run golangci-lint"
      before_install:
        - >-
          curl -sfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh |
          sh -s -- -b $(go env GOPATH)/bin $GOLANGCI_LINT_VERSION # pinned
      before_script:
        - cd ${BUILD_DIR_DRIVER}
      script:
        #- golangci-lint run
        - golangci-lint run --no-config --disable-all -E gosec --out-format json,colored-line-number --timeout 3m0s

    # stage: lint
    - name: "Lint - Operator: run linters and bundle automation."
      before_install:
        - >-
          curl -sfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh |
          sh -s -- -b $(go env GOPATH)/bin $GOLANGCI_LINT_VERSION # pinned
      before_script:
        - cd ${BUILD_DIR_OPERATOR}
      script:
        - pip3 install ansible
        - curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash -s -- $KUSTOMIZE_VERSION ${HOME}/bin
        # Testing that the generated files match the deploy/*.yaml files, it they do not match, fail Travis
        - ansible-playbook ${TRAVIS_BUILD_DIR}/tools/ansible/generate-playbook.yaml --extra-vars "travis_testing=true"
        - golangci-lint run --no-config --disable-all -E gosec --out-format json,colored-line-number --timeout 3m0s

    - stage: build
      name: "Build - Driver: image and push to registry"
      <<: *docker_buildx
      before_script:
        - cd ${BUILD_DIR_DRIVER}
        - go mod vendor
      script:
        - go test -v -race ./...
        - docker buildx build --progress=plain --platform ${BUILD_PLATFORMS} ${IMAGE_LABEL} --build-arg commit=${COMMIT} --build-arg build_date="$(date -u)"  .
      before_deploy:
        - echo "$QUAY_BOT_PASSWORD" | docker login -u "$QUAY_BOT_USERNAME" --password-stdin quay.io
      deploy:
        - provider: script
          script: docker buildx build --progress=plain --platform ${BUILD_PLATFORMS} ${IMAGE_LABEL} --build-arg commit=${COMMIT} --build-arg build_date="$(date -u)" -t ${IMAGE_FQN_DRIVER} --push .
          on:
            all_branches: true
            condition: -n "$QUAY_BOT_USERNAME" && -n "$QUAY_BOT_PASSWORD"

    # stage: build
    - name: "Build - Operator: image and push to registry"
      <<: *docker_buildx
      install:
        - docker version
      before_script:
        - ${TRAVIS_BUILD_DIR}/tools/scripts/ci/install_operator-sdk.sh
        - operator-sdk version
        - cd ${BUILD_DIR_OPERATOR}
      script:
        - travis_wait 6 docker buildx build --progress=plain --platform ${BUILD_PLATFORMS} ${IMAGE_LABEL} --build-arg commit=${COMMIT} --build-arg build_date="$(date -u)" .
      before_deploy:
        - echo "$QUAY_BOT_PASSWORD" | docker login -u "$QUAY_BOT_USERNAME" --password-stdin quay.io
      deploy:
        - provider: script
          script: docker buildx build --progress=plain --platform ${BUILD_PLATFORMS} ${IMAGE_LABEL} --build-arg commit=${COMMIT} --build-arg build_date="$(date -u)" -t ${IMAGE_FQN_OPERATOR} --push .
          on:
            all_branches: true
            condition: -n "$QUAY_BOT_USERNAME" && -n "$QUAY_BOT_PASSWORD"
#        - provider: script
#          script: ../tools/scripts/push_app.sh
#          on:
#            all_branches: true
#            condition: -n "$QUAY_BOT_USERNAME" && -n "$QUAY_BOT_PASSWORD" && -n "$QUAY_APP"

#    # stage: build
#    - name: "Build - Operator: docs"
#      script:
#        - pip3 install sphinx sphinx_rtd_theme recommonmark
#        - cd ${TRAVIS_BUILD_DIR}/docs
#        - make html
#    # end stage: build

#    # Install minikube, build the image and run the scorecard then execute molecule testing.
#    - stage: test
#      name: "Test - Operator: molecule"
#      dist: xenial
#      before_install:
#        - pip install --upgrade pip
#        - pip install docker molecule ansible-lint yamllint flake8 openshift jmespath kubernetes-validate
#        - ${TRAVIS_BUILD_DIR}/tools/scripts/ci/install_minikube.sh
#        - ${TRAVIS_BUILD_DIR}/tools/scripts/ci/install_operator-sdk.sh
#        - kubectl version
#        - cd ${BUILD_DIR_OPERATOR}
#        - eval $(minikube docker-env) # Popping this out, because I don't think the script is working.
#        - operator-sdk build ${REPO_NAME_OPERATOR}
#        - docker tag ${REPO_NAME_OPERATOR} ${OPERATOR_LOCAL_IMAGE}
#      script:
#        # molecule
#        - ansible-playbook hacks/change_deploy_image.yml --extra-vars "quay_operator_endpoint=${OPERATOR_LOCAL_IMAGE}"
#        - kubectl create namespace ibm-spectrum-scale-csi-driver
#          #- molecule test -s test-local
#
#    - stage: test
#      name: "Test - Operator: scorecard"
#      dist: xenial
#      before_install:
#        - pip install --upgrade pip
#        - pip install docker molecule ansible-lint yamllint flake8 openshift jmespath kubernetes-validate
#        - ${TRAVIS_BUILD_DIR}/tools/scripts/ci/install_minikube.sh
#        - ${TRAVIS_BUILD_DIR}/tools/scripts/ci/install_operator-sdk.sh
#        - kubectl version
#        - cd ${BUILD_DIR_OPERATOR}
#        - eval $(minikube docker-env) # Popping this out, because I don't think the script is working.
#      script:
#        - python hacks/clear_finalizers.py
#        #- ansible-playbook hacks/change_deploy_image.yml --extra-vars "quay_operator_endpoint=${OPERATOR_LOCAL_IMAGE}"
#        - operator-sdk build ${REPO_NAME_OPERATOR}
#        - docker tag ${REPO_NAME_OPERATOR} ${OPERATOR_LOCAL_IMAGE}
#        - kubectl create namespace ibm-spectrum-scale-csi-driver
#        - operator-sdk scorecard --config .osdk-scorecard.yaml --verbose

notifications:
  email: false
