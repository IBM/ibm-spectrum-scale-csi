services: docker
sudo: required
dist: xenial
language: go
go:
  - 1.13.x

env:
  global:
# Shared ENV
    - REPO_OWNER=$(dirname $TRAVIS_REPO_SLUG)
    # REPO_NAME should normally be 'ibm-spectrum-scale-csi'
    - REPO_NAME=$(basename $TRAVIS_REPO_SLUG)
    - REPO_NAME_DRIVER="${REPO_NAME}-driver"
    - REPO_NAME_OPERATOR="${REPO_NAME}-operator"
   
    # Grab quay username from 'user+bot_token'
    - IMAGE_REPO_OWNER=${QUAY_BOT_USERNAME%%\+*}
    # Format quay image target
    - IMAGE_REPO_DRIVER=quay.io/${IMAGE_REPO_OWNER}/${REPO_NAME_DRIVER}
    - IMAGE_REPO_OPERATOR=quay.io/${IMAGE_REPO_OWNER}/${REPO_NAME_OPERATOR}
    # Add image tag
    - IMAGE_TAG=$( 
        if [[ $TRAVIS_EVENT_TYPE == 'cron' ]]; 
        then 
            echo "nightly-${TRAVIS_BUILD_ID}-`date -u +%F`"; 
        else
            echo $TRAVIS_BRANCH; 
        fi
      )
    # Add image repo and tag
    - IMAGE_FQN_DRIVER=${IMAGE_REPO_DRIVER}:${IMAGE_TAG}
    - IMAGE_FQN_OPERATOR=${IMAGE_REPO_OPERATOR}:${IMAGE_TAG}
    - IMAGE_VERSION=${IMAGE_TAG}
    # Add image label to expire nightlies
    - IMAGE_LABEL=$(
        if [[ $TRAVIS_EVENT_TYPE == 'cron' ]];
        then
            echo "--label version=${IMAGE_VERSION} --label quay.expires-after=2w";
        else
            echo "--label version=${IMAGE_VERSION}";
        fi
      )
    - BUILD_DIR_OPERATOR="${TRAVIS_BUILD_DIR}/operator"
    - BUILD_DIR_DRIVER="${TRAVIS_BUILD_DIR}/driver"


# Operator ENV
    - OCTOKIT_API_ENDPOINT="https://github.ibm.com/api/v3/"
    - PATH=/opt/python/3.6.7/bin:$PATH
    - GO111MODULE=on
    - KUBE_VERSION="v1.16.2"
    - OP_VER="v0.11.0"
    - OPERATOR_LOCAL_IMAGE="csi.ibm.com/${REPO_NAME_OPERATOR}:testing"
    - OPERATOR_SDK="https://github.com/operator-framework/operator-sdk/releases/download/${OP_VER}/operator-sdk-${OP_VER}-x86_64-linux-gnu"
    - OLM_MANIFEST="${BUILD_DIR_OPERATOR}/deploy/olm-catalog/${REPO_NAME_OPERATOR}/"
    - CHANGE_MINIKUBE_NONE_USER=true
    - MINIKUBE_WANTUPDATENOTIFICATION=false
    - MINIKUBE_WANTREPORTERRORPROMPT=false
    - MINIKUBE_HOME=$HOME
    - KUBECONFIG=$HOME/.kube/config

addons:
  apt:
    packages:
      - "python3"
      - "python3-dev"
      - "python3-pip"
stages:
  - lint
  - build
  - test
jobs:
  fast_finish: true
  include:
    
    # Install operator-courier and run the lint on the manifest.
    - stage: lint
      name: "Lint - Driver: run golangci-lint"
      before_install:
        - >-
          curl -sfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh |
          sh -s -- -b $(go env GOPATH)/bin v1.21.0 # pinned
      before_script:
        - cd ${BUILD_DIR_DRIVER}
      script:
        - golangci-lint run
    
    # stage: lint
    - name: "Lint - Operator: run linters and bundle automation."
      script:
        - pip install ansible
        # Testing that the generated files match the deploy/*.yaml files, it they do not match, fail Travis
        - ansible-playbook ${TRAVIS_BUILD_DIR}/tools/ansible/generate-playbook.yaml --extra-vars "travis_testing=true"
        - pip install operator-courier
        - cd ${BUILD_DIR_OPERATOR}
        - python hacks/package_operator.py -d ${OLM_MANIFEST}  -o /tmp/operator --nozip 
        - operator-courier --verbose verify --ui_validate_io /tmp/operator
    
    # stage: lint
    - name: "Lint - Operator: CASE"
      if: env.HELM_REPO_SSH_LOCATION!=""
      before_install:
        - if [[  -z "$HELM_REPO_SSH_LOCATION" ]] ; then exit 0;fi
      install:
        # Clone build tools & set tools path for follow on processing
        # The clone command will use the ssh key from the travis settings to clone the repo from github.ibm.com
        - if [[  -z "$HELM_REPO_SSH_LOCATION" ]] ; then exit 0;fi
        - if [[ ! -z "$BRANCH_OVERRIDE" ]] ; then
            git clone -b $BRANCH_OVERRIDE git@github.ibm.com:ibmprivatecloud/content-tools;
          else
            git clone git@github.ibm.com:ibmprivatecloud/content-tools;
          fi
        - export toolsPath=`pwd`/content-tools/travis-tools/
        # Install dependencies & determine chart delta
        - $toolsPath/build/bin/installDependencies.sh
        - export changeList=`$toolsPath/build/bin/determineChartDelta.sh | tee determineChartDelta.out | grep 'return determineChartDelta:' | cut -f2 -d:` && cat determineChartDelta.out
        # Package for release
        - if [[ ! -z "$TRAVIS_TAG" ]] ; then $toolsPath/release/bin/package.sh; fi
        # Lint and install/test charts (if cv-tests exist)
        - $toolsPath/cv-test/bin/validateContent.sh
      deploy:
          # scp helm repo(s) to location identified (Note: SSHPASS env variable must contain password)
          - provider: script
            skip_cleanup: true
            script:  $toolsPath/build/bin/deployHelmRepo.sh
            on:
              all_branches: true
          # Publish tagged release
          - provider: releases
            skip_cleanup: true
            api_key: $GITHUB_TOKEN
            file_glob: true
            file: repo/stable/*
            on:
              tags: true
    # end stage: lint


    - stage: build
      name: "Build - Driver: image and push to registry"
      env:
        - GOFLAGS="-mod=vendor" #this should not be required in Go 1.14, see https://github.com/golang/go/issues/33848
      before_script:
        - cd ${BUILD_DIR_DRIVER}
        - go mod vendor
      script:
        - go test -v -race ./...
        - docker build ${IMAGE_LABEL} --build-arg GOFLAGS=${GOFLAGS} -f Dockerfile -t ${REPO_NAME_DRIVER} .
      before_deploy:
        - echo "$QUAY_BOT_PASSWORD" | docker login -u "$QUAY_BOT_USERNAME" --password-stdin quay.io
        - docker tag ${REPO_NAME_DRIVER} ${IMAGE_FQN_DRIVER}
      deploy:
        - provider: script
          script: docker push ${IMAGE_FQN_DRIVER}
          on:
            all_branches: true
            condition: -n "$QUAY_BOT_USERNAME" && -n "$QUAY_BOT_PASSWORD"
    
    # stage: build
    - name: "Build - Operator: image and push to registry"
      install:
        - docker version
      before_script:
        - ${TRAVIS_BUILD_DIR}/tools/scripts/ci/install_operator-sdk.sh
        - operator-sdk version
      script:       
        - cd ${BUILD_DIR_OPERATOR}
        - operator-sdk build ${REPO_NAME_OPERATOR} --image-build-args '${IMAGE_LABEL}'
      before_deploy:
        - echo "$QUAY_BOT_PASSWORD" | docker login -u "$QUAY_BOT_USERNAME" --password-stdin quay.io
        - docker tag ${REPO_NAME_OPERATOR} ${IMAGE_FQN_OPERATOR}
      deploy:
        - provider: script
          script: docker push ${IMAGE_FQN_OPERATOR}
          on:
            all_branches: true
            condition: -n "$QUAY_BOT_USERNAME" && -n "$QUAY_BOT_PASSWORD"

    # stage: build
    - name: "Build - Operator: docs"
      script:
        - pip install sphinx sphinx_rtd_theme recommonmark 
        - cd ${TRAVIS_BUILD_DIR}/docs
        - make html
    # end stage: build


    # Install minikube, build the image and run the scorecard then execute molecule testing.
    - stage: test
      name: "Test - Operator: scorecard and molecule"
      before_install:
        - pip install pyyaml molecule openshift docker jmespath kubernetes-validate
        - ${TRAVIS_BUILD_DIR}/tools/scripts/ci/install_minikube.sh
        - ${TRAVIS_BUILD_DIR}/tools/scripts/ci/install_operator-sdk.sh
        - kubectl version
        - cd ${BUILD_DIR_OPERATOR}
        - eval $(minikube docker-env) # Popping this out, because I don't think the script is working.
        - operator-sdk build ${REPO_NAME_OPERATOR}
        - docker tag ${REPO_NAME_OPERATOR} ${OPERATOR_LOCAL_IMAGE}
      script:        
        # molecule
        - python hacks/change_deploy_image.py -i ${OPERATOR_LOCAL_IMAGE} --ifnotpresent
        - kubectl create -f deploy/namespace.yaml
        - molecule test -s test-local
        # sc
        - python hacks/clear_finalizers.py
        - operator-sdk scorecard --config .osdk-scorecard.yaml
        - python  hacks/clear_finalizers.py --restore
    

notifications:
  email: false
